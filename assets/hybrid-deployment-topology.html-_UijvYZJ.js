import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as d,c as r,a as t,d as e,b as l,w as p,f as i}from"./app-DR5J2daJ.js";const c={},u=i('<h1 id="混合部署拓扑" tabindex="-1"><a class="header-anchor" href="#混合部署拓扑"><span>混合部署拓扑</span></a></h1><p>本文介绍 TiDB 集群的 TiKV 和 TiDB 混合部署拓扑以及主要参数。常见的场景为，部署机为多路 CPU 处理器，内存也充足，为提高物理机资源利用率，可单机多实例部署，即 TiDB、TiKV 通过 numa 绑核，隔离 CPU 资源。PD 和 Prometheus 混合部署，但两者的数据目录需要使用独立的文件系统。</p><h2 id="拓扑信息" tabindex="-1"><a class="header-anchor" href="#拓扑信息"><span>拓扑信息</span></a></h2><table><thead><tr><th style="text-align:left;">实例</th><th style="text-align:left;">个数</th><th style="text-align:left;">物理机配置</th><th style="text-align:left;">IP</th><th style="text-align:left;">配置</th></tr></thead><tbody><tr><td style="text-align:left;">TiDB</td><td style="text-align:left;">6</td><td style="text-align:left;">32 VCore 64GB</td><td style="text-align:left;">10.0.1.1<br> 10.0.1.2<br> 10.0.1.3</td><td style="text-align:left;">配置 numa 绑核操作</td></tr><tr><td style="text-align:left;">PD</td><td style="text-align:left;">3</td><td style="text-align:left;">16 VCore 32 GB</td><td style="text-align:left;">10.0.1.4<br> 10.0.1.5<br> 10.0.1.6</td><td style="text-align:left;">配置 location_labels 参数</td></tr><tr><td style="text-align:left;">TiKV</td><td style="text-align:left;">6</td><td style="text-align:left;">32 VCore 64GB</td><td style="text-align:left;">10.0.1.7<br> 10.0.1.8<br> 10.0.1.9</td><td style="text-align:left;">1. 区分实例级别的 port、status_port；<br> 2. 配置全局参数 readpool、storage 以及 raftstore；<br> 3. 配置实例级别 host 维度的 labels；<br> 4. 配置 numa 绑核操作</td></tr><tr><td style="text-align:left;">Monitoring &amp; Grafana</td><td style="text-align:left;">1</td><td style="text-align:left;">4 VCore 8GB * 1 500GB (ssd)</td><td style="text-align:left;">10.0.1.10</td><td style="text-align:left;">默认配置</td></tr></tbody></table><h3 id="拓扑模版" tabindex="-1"><a class="header-anchor" href="#拓扑模版"><span>拓扑模版</span></a></h3>',5),m={href:"https://github.com/pingcap/docs-cn/blob/master/config-templates/simple-multi-instance.yaml",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/pingcap/docs-cn/blob/master/config-templates/complex-multi-instance.yaml",target:"_blank",rel:"noopener noreferrer"},y=i(`<h3 id="混合部署的关键参数介绍" tabindex="-1"><a class="header-anchor" href="#混合部署的关键参数介绍"><span>混合部署的关键参数介绍</span></a></h3><p>本节介绍单机多实例的关键参数，主要用于 TiDB、TiKV 的单机多实例部署场景。你需要按照提供的计算公式，将结果填写至上一步的配置模板中。</p><ul><li><p>TiKV 进行配置优化</p><ul><li><p>readpool 线程池自适应，配置 <code>readpool.unified.max-thread-count</code> 参数可以使 <code>readpool.storage</code> 和 <code>readpool.coprocessor</code> 共用统一线程池，同时要分别设置自适应开关。</p><ul><li><p>开启 <code>readpool.storage</code> 和 <code>readpool.coprocessor</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">readpool.storage.use-unified-pool</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">readpool.coprocessor.use-unified-pool</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>计算公式如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>readpool.unified.max-thread-count = cores * 0.8 / TiKV 数量
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>storage CF (all RocksDB column families) 内存自适应，配置 <code>storage.block-cache.capacity</code> 参数即可实现 CF 之间自动平衡内存使用。</p><ul><li><p>计算公式如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>storage.block-cache.capacity = (MEM_TOTAL * 0.5 / TiKV 实例数量)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>如果多个 TiKV 实例部署在同一块物理磁盘上，需要在 tikv 配置中添加 capacity 参数：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>raftstore.capacity = 磁盘总容量 / TiKV 实例数量
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>label 调度配置</p><p>由于采用单机多实例部署 TiKV，为了避免物理机宕机导致 Region Group 默认 3 副本的 2 副本丢失，导致集群不可用的问题，可以通过 label 来实现 PD 智能调度，保证同台机器的多 TiKV 实例不会出现 Region Group 只有 2 副本的情况。</p><ul><li><p>TiKV 配置</p><p>相同物理机配置相同的 host 级别 label 信息：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">server.labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> tikv1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>PD 配置</p><p>PD 需要配置 labels 类型来识别并调度 Region：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">pd</span><span class="token punctuation">:</span>
  <span class="token key atrule">replication.location-labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;host&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>numa_node</code> 绑核</p><ul><li><p>在实例参数模块配置对应的 <code>numa_node</code> 参数，并添加对应的物理 CPU 的核数；</p></li><li><p>numa 绑核使用前，确认已经安装 numactl 工具，以及物理机对应的物理机 CPU 的信息后，再进行参数配置；</p></li><li><p><code>numa_node</code> 这个配置参数与 <code>numactl --membind</code> 配置对应。</p></li></ul></li></ul><blockquote><p><strong>注意：</strong></p><ul><li>编辑配置文件模版时，注意修改必要参数、IP、端口及目录。</li><li>各个组件的 deploy_dir，默认会使用 global 中的 <code>&lt;deploy_dir&gt;/&lt;components_name&gt;-&lt;port&gt;</code>。例如 tidb 端口指定 4001，则 deploy_dir 默认为 &#39;/tidb-deploy/tidb-4001&#39;。因此，在多实例场景下指定非默认端口时，无需再次指定目录。</li><li>无需手动创建配置文件中的 <code>tidb</code> 用户，TiUP cluster 组件会在部署主机上自动创建该用户。可以自定义用户，也可以和中控机的用户保持一致。</li><li>如果部署目录配置为相对路径，会部署在用户的 Home 目录下。</li></ul></blockquote>`,4);function h(b,f){const a=n("ExternalLinkIcon"),o=n("RouteLink");return d(),r("div",null,[u,t("p",null,[t("a",m,[e("简单混部配置模板"),l(a)])]),t("p",null,[t("a",g,[e("详细混部配置模板"),l(a)])]),t("p",null,[e("以上 TiDB 集群拓扑文件中，详细的配置项说明见"),l(o,{to:"/tiup/tiup-cluster-topology-reference.html"},{default:p(()=>[e("通过 TiUP 部署 TiDB 集群的拓扑文件配置")]),_:1}),e("。")]),y])}const T=s(c,[["render",h],["__file","hybrid-deployment-topology.html.vue"]]),k=JSON.parse('{"path":"/guide/database/tidb/deployments/topology/hybrid-deployment-topology.html","title":"混合部署拓扑","lang":"zh-CN","frontmatter":{"title":"混合部署拓扑","description":"混合部署拓扑 本文介绍 TiDB 集群的 TiKV 和 TiDB 混合部署拓扑以及主要参数。常见的场景为，部署机为多路 CPU 处理器，内存也充足，为提高物理机资源利用率，可单机多实例部署，即 TiDB、TiKV 通过 numa 绑核，隔离 CPU 资源。PD 和 Prometheus 混合部署，但两者的数据目录需要使用独立的文件系统。 拓扑信息 拓扑...","head":[["meta",{"property":"og:url","content":"https://github.com/abelit/abelit-datapeacock.git/guide/database/tidb/deployments/topology/hybrid-deployment-topology.html"}],["meta",{"property":"og:site_name","content":"数之雀"}],["meta",{"property":"og:title","content":"混合部署拓扑"}],["meta",{"property":"og:description","content":"混合部署拓扑 本文介绍 TiDB 集群的 TiKV 和 TiDB 混合部署拓扑以及主要参数。常见的场景为，部署机为多路 CPU 处理器，内存也充足，为提高物理机资源利用率，可单机多实例部署，即 TiDB、TiKV 通过 numa 绑核，隔离 CPU 资源。PD 和 Prometheus 混合部署，但两者的数据目录需要使用独立的文件系统。 拓扑信息 拓扑..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T14:06:18.000Z"}],["meta",{"property":"article:author","content":"Abelit"}],["meta",{"property":"article:modified_time","content":"2024-05-11T14:06:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"混合部署拓扑\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-11T14:06:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Abelit\\",\\"url\\":\\"https://github.com/abelit\\"}]}"]]},"headers":[{"level":2,"title":"拓扑信息","slug":"拓扑信息","link":"#拓扑信息","children":[{"level":3,"title":"拓扑模版","slug":"拓扑模版","link":"#拓扑模版","children":[]},{"level":3,"title":"混合部署的关键参数介绍","slug":"混合部署的关键参数介绍","link":"#混合部署的关键参数介绍","children":[]}]}],"git":{"createdTime":1715436378000,"updatedTime":1715436378000,"contributors":[{"name":"ableit","email":"ychenid@live.com","commits":1}]},"readingTime":{"minutes":3.05,"words":916},"filePathRelative":"guide/database/tidb/deployments/topology/hybrid-deployment-topology.md","localizedDate":"2024年5月11日","autoDesc":true,"excerpt":"\\n<p>本文介绍 TiDB 集群的 TiKV 和 TiDB 混合部署拓扑以及主要参数。常见的场景为，部署机为多路 CPU 处理器，内存也充足，为提高物理机资源利用率，可单机多实例部署，即 TiDB、TiKV 通过 numa 绑核，隔离 CPU 资源。PD 和 Prometheus 混合部署，但两者的数据目录需要使用独立的文件系统。</p>\\n<h2>拓扑信息</h2>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:left\\">实例</th>\\n<th style=\\"text-align:left\\">个数</th>\\n<th style=\\"text-align:left\\">物理机配置</th>\\n<th style=\\"text-align:left\\">IP</th>\\n<th style=\\"text-align:left\\">配置</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:left\\">TiDB</td>\\n<td style=\\"text-align:left\\">6</td>\\n<td style=\\"text-align:left\\">32 VCore 64GB</td>\\n<td style=\\"text-align:left\\">10.0.1.1<br> 10.0.1.2<br> 10.0.1.3</td>\\n<td style=\\"text-align:left\\">配置 numa 绑核操作</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">PD</td>\\n<td style=\\"text-align:left\\">3</td>\\n<td style=\\"text-align:left\\">16 VCore 32 GB</td>\\n<td style=\\"text-align:left\\">10.0.1.4<br> 10.0.1.5<br> 10.0.1.6</td>\\n<td style=\\"text-align:left\\">配置 location_labels 参数</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">TiKV</td>\\n<td style=\\"text-align:left\\">6</td>\\n<td style=\\"text-align:left\\">32 VCore 64GB</td>\\n<td style=\\"text-align:left\\">10.0.1.7<br> 10.0.1.8<br> 10.0.1.9</td>\\n<td style=\\"text-align:left\\">1. 区分实例级别的 port、status_port；<br> 2. 配置全局参数 readpool、storage 以及 raftstore；<br> 3. 配置实例级别 host 维度的 labels；<br> 4. 配置 numa 绑核操作</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">Monitoring &amp; Grafana</td>\\n<td style=\\"text-align:left\\">1</td>\\n<td style=\\"text-align:left\\">4 VCore 8GB * 1 500GB (ssd)</td>\\n<td style=\\"text-align:left\\">10.0.1.10</td>\\n<td style=\\"text-align:left\\">默认配置</td>\\n</tr>\\n</tbody>\\n</table>"}');export{T as comp,k as data};
