import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as p,c as m,a,d as e,b as t,w as l,f as s}from"./app-DR5J2daJ.js";const o={},d=a("h1",{id:"如何对-tidb-进行-tpc-c-测试",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#如何对-tidb-进行-tpc-c-测试"},[a("span",null,"如何对 TiDB 进行 TPC-C 测试")])],-1),u={href:"http://www.tpc.org/tpcc/",target:"_blank",rel:"noopener noreferrer"},h=s("<p>TPC-C 是一个对 OLTP（联机交易处理）系统进行测试的规范，使用一个商品销售模型对 OLTP 系统进行测试，其中包含五类事务：</p><ul><li>NewOrder – 新订单的生成</li><li>Payment – 订单付款</li><li>OrderStatus – 最近订单查询</li><li>Delivery – 配送</li><li>StockLevel – 库存缺货状态分析</li></ul><p>在测试开始前，TPC-C Benchmark 规定了数据库的初始状态，也就是数据库中数据生成的规则，其中 ITEM 表中固定包含 10 万种商品，仓库的数量可进行调整，假设 WAREHOUSE 表中有 W 条记录，那么：</p><ul><li>STOCK 表中应有 W * 10 万条记录（每个仓库对应 10 万种商品的库存数据）</li><li>DISTRICT 表中应有 W * 10 条记录（每个仓库为 10 个地区提供服务）</li><li>CUSTOMER 表中应有 W * 10 * 3000 条记录（每个地区有 3000 个客户）</li><li>HISTORY 表中应有 W * 10 * 3000 条记录（每个客户一条交易历史）</li><li>ORDER 表中应有 W * 10 * 3000 条记录（每个地区 3000 个订单），并且最后生成的 900 个订单被添加到 NEW-ORDER 表中，每个订单随机生成 5 ~ 15 条 ORDER-LINE 记录。</li></ul><p>我们将以 1000 WAREHOUSE 为例进行测试。</p><p>TPC-C 使用 tpmC 值 (Transactions per Minute) 来衡量系统最大有效吞吐量 (MQTh, Max Qualified Throughput)，其中 Transactions 以 NewOrder Transaction 为准，即最终衡量单位为每分钟处理的新订单数。</p>",6),b={href:"https://github.com/pingcap/go-tpc",target:"_blank",rel:"noopener noreferrer"},v=s(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>tiup <span class="token function">install</span> bench
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),T=s(`<p>假设已部署 TiDB 集群，其中 TiDB 节点部署在 172.16.5.140、 172.16.5.141 实例上，端口都为 4000，可按如下步骤进行 TPC-C 测试。</p><h2 id="导入数据" tabindex="-1"><a class="header-anchor" href="#导入数据"><span>导入数据</span></a></h2><p><strong>导入数据通常是整个 TPC-C 测试中最耗时，也是最容易出问题的阶段。</strong></p><p>在 shell 中运行 TiUP 命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>tiup bench tpcc <span class="token parameter variable">-H</span> <span class="token number">172.16</span>.5.140,172.16.5.141 <span class="token parameter variable">-P</span> <span class="token number">4000</span> <span class="token parameter variable">-D</span> tpcc <span class="token parameter variable">--warehouses</span> <span class="token number">1000</span> <span class="token parameter variable">--threads</span> <span class="token number">20</span> prepare
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>基于不同的机器配置，这个过程可能会持续几个小时。如果是小型集群，可以使用较小的 WAREHOUSE 值进行测试。</p><p>数据导入完成后，可以通过命令 <code>tiup bench tpcc -H 172.16.5.140 -P 4000 -D tpcc --warehouses 4 check</code> 验证数据正确性。</p><h2 id="运行测试" tabindex="-1"><a class="header-anchor" href="#运行测试"><span>运行测试</span></a></h2><p>运行测试的命令是：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>tiup bench tpcc <span class="token parameter variable">-H</span> <span class="token number">172.16</span>.5.140,172.16.5.141 <span class="token parameter variable">-P</span> <span class="token number">4000</span> <span class="token parameter variable">-D</span> tpcc <span class="token parameter variable">--warehouses</span> <span class="token number">1000</span> <span class="token parameter variable">--threads</span> <span class="token number">100</span> <span class="token parameter variable">--time</span> 10m run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行过程中控制台上会持续打印测试结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>[Current] NEW_ORDER - Takes(s): 4.6, Count: 5, TPM: 65.5, Sum(ms): 4604, Avg(ms): 920, 90th(ms): 1500, 99th(ms): 1500, 99.9th(ms): 1500
[Current] ORDER_STATUS - Takes(s): 1.4, Count: 1, TPM: 42.2, Sum(ms): 256, Avg(ms): 256, 90th(ms): 256, 99th(ms): 256, 99.9th(ms): 256
[Current] PAYMENT - Takes(s): 6.9, Count: 5, TPM: 43.7, Sum(ms): 2208, Avg(ms): 441, 90th(ms): 512, 99th(ms): 512, 99.9th(ms): 512
[Current] STOCK_LEVEL - Takes(s): 4.4, Count: 1, TPM: 13.8, Sum(ms): 224, Avg(ms): 224, 90th(ms): 256, 99th(ms): 256, 99.9th(ms): 256
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结束后，会打印测试统计结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>[Summary] DELIVERY - Takes(s): 455.2, Count: 32, TPM: 4.2, Sum(ms): 44376, Avg(ms): 1386, 90th(ms): 2000, 99th(ms): 4000, 99.9th(ms): 4000
[Summary] DELIVERY_ERR - Takes(s): 455.2, Count: 1, TPM: 0.1, Sum(ms): 953, Avg(ms): 953, 90th(ms): 1000, 99th(ms): 1000, 99.9th(ms): 1000
[Summary] NEW_ORDER - Takes(s): 487.8, Count: 314, TPM: 38.6, Sum(ms): 282377, Avg(ms): 899, 90th(ms): 1500, 99th(ms): 1500, 99.9th(ms): 1500
[Summary] ORDER_STATUS - Takes(s): 484.6, Count: 29, TPM: 3.6, Sum(ms): 8423, Avg(ms): 290, 90th(ms): 512, 99th(ms): 1500, 99.9th(ms): 1500
[Summary] PAYMENT - Takes(s): 490.1, Count: 321, TPM: 39.3, Sum(ms): 144708, Avg(ms): 450, 90th(ms): 512, 99th(ms): 1000, 99.9th(ms): 1500
[Summary] STOCK_LEVEL - Takes(s): 487.6, Count: 41, TPM: 5.0, Sum(ms): 9318, Avg(ms): 227, 90th(ms): 512, 99th(ms): 1000, 99.9th(ms): 1000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试完成之后，也可以运行 <code>tiup bench tpcc -H 172.16.5.140 -P 4000 -D tpcc --warehouses 4 check</code> 进行数据正确性验证。</p><h2 id="清理测试数据" tabindex="-1"><a class="header-anchor" href="#清理测试数据"><span>清理测试数据</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>tiup bench tpcc <span class="token parameter variable">-H</span> <span class="token number">172.16</span>.5.140 <span class="token parameter variable">-P</span> <span class="token number">4000</span> <span class="token parameter variable">-D</span> tpcc <span class="token parameter variable">--warehouses</span> <span class="token number">4</span> cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17);function g(C,k){const n=r("ExternalLinkIcon"),i=r("RouteLink");return p(),m("div",null,[d,a("p",null,[e("本文介绍如何对 TiDB 进行 "),a("a",u,[e("TPC-C"),t(n)]),e(" 测试。")]),h,a("p",null,[e("本文使用 "),a("a",b,[e("go-tpc"),t(n)]),e(" 作为 TPC-C 测试实现，可以通过 "),t(i,{to:"/tiup/tiup-overview.html"},{default:l(()=>[e("TiUP")]),_:1}),e(" 命令下载测试程序：")]),v,a("p",null,[e("关于 TiUP Bench 组件的详细用法可参考 "),t(i,{to:"/tiup/tiup-bench.html"},{default:l(()=>[e("TiUP Bench")]),_:1}),e("。")]),T])}const S=c(o,[["render",g],["__file","benchmark-tidb-using-tpcc.html.vue"]]),D=JSON.parse('{"path":"/guide/database/tidb/deployments/test/benchmark-tidb-using-tpcc.html","title":"如何对 TiDB 进行 TPC-C 测试","lang":"zh-CN","frontmatter":{"title":"如何对 TiDB 进行 TPC-C 测试","description":"如何对 TiDB 进行 TPC-C 测试 本文介绍如何对 TiDB 进行 TPC-C 测试。 TPC-C 是一个对 OLTP（联机交易处理）系统进行测试的规范，使用一个商品销售模型对 OLTP 系统进行测试，其中包含五类事务： NewOrder – 新订单的生成 Payment – 订单付款 OrderStatus – 最近订单查询 Delivery ...","head":[["meta",{"property":"og:url","content":"https://github.com/abelit/abelit-datapeacock.git/guide/database/tidb/deployments/test/benchmark-tidb-using-tpcc.html"}],["meta",{"property":"og:site_name","content":"数之雀"}],["meta",{"property":"og:title","content":"如何对 TiDB 进行 TPC-C 测试"}],["meta",{"property":"og:description","content":"如何对 TiDB 进行 TPC-C 测试 本文介绍如何对 TiDB 进行 TPC-C 测试。 TPC-C 是一个对 OLTP（联机交易处理）系统进行测试的规范，使用一个商品销售模型对 OLTP 系统进行测试，其中包含五类事务： NewOrder – 新订单的生成 Payment – 订单付款 OrderStatus – 最近订单查询 Delivery ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T14:06:18.000Z"}],["meta",{"property":"article:author","content":"Abelit"}],["meta",{"property":"article:modified_time","content":"2024-05-11T14:06:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何对 TiDB 进行 TPC-C 测试\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-11T14:06:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Abelit\\",\\"url\\":\\"https://github.com/abelit\\"}]}"]]},"headers":[{"level":2,"title":"导入数据","slug":"导入数据","link":"#导入数据","children":[]},{"level":2,"title":"运行测试","slug":"运行测试","link":"#运行测试","children":[]},{"level":2,"title":"清理测试数据","slug":"清理测试数据","link":"#清理测试数据","children":[]}],"git":{"createdTime":1715436378000,"updatedTime":1715436378000,"contributors":[{"name":"ableit","email":"ychenid@live.com","commits":1}]},"readingTime":{"minutes":3.24,"words":971},"filePathRelative":"guide/database/tidb/deployments/test/benchmark-tidb-using-tpcc.md","localizedDate":"2024年5月11日","autoDesc":true,"excerpt":"\\n<p>本文介绍如何对 TiDB 进行 <a href=\\"http://www.tpc.org/tpcc/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">TPC-C</a> 测试。</p>\\n<p>TPC-C 是一个对 OLTP（联机交易处理）系统进行测试的规范，使用一个商品销售模型对 OLTP 系统进行测试，其中包含五类事务：</p>\\n<ul>\\n<li>NewOrder – 新订单的生成</li>\\n<li>Payment – 订单付款</li>\\n<li>OrderStatus – 最近订单查询</li>\\n<li>Delivery – 配送</li>\\n<li>StockLevel – 库存缺货状态分析</li>\\n</ul>"}');export{S as comp,D as data};
