import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as i,f as a}from"./app-DR5J2daJ.js";const t={},p=a('<h2 id="实例优化" tabindex="-1"><a class="header-anchor" href="#实例优化"><span>实例优化</span></a></h2><h3 id="实例调优思路" tabindex="-1"><a class="header-anchor" href="#实例调优思路"><span>实例调优思路</span></a></h3><ul><li><p>CPU 性能问题</p><ul><li>使用 Oracle 数据库资源管理器通过确定 CPU 资源分配的优先级来降低峰值负载使用模式的影响</li><li>避免运行过多使用大量 CPU 的进程</li><li>增加硬件容量，包括更改系统架构</li></ul></li><li><p>内存性能问题</p><ul><li>使用自动内存管理在系统全局区域 （SGA） 和聚合程序全局区域（PGA 聚合）之间自动管理和分配内存。</li><li>使用内存顾问设置 SGA 和 PGA 内存目标值。</li><li>使用自动 PGA 管理来管理 SQL 内存执行。</li><li>避免运行过多消耗大量内存的进程。</li><li>减少分页或交换。</li><li>通过游标共享减少打开游标和硬解析的数量。</li></ul></li><li><p>磁盘 I/O 性能问题</p><ul><li>使用 Oracle 自动存储管理 （Oracle ASM） 管理数据库存储。</li><li>跨每个磁盘对所有内容进行条带化以分发 I/O。</li><li>将存档的重做日志和联机重做日志等文件移动到单独的磁盘。</li><li>将所需数据存储在内存中以减少物理 I/O 的数量。</li></ul></li></ul><h3 id="基线" tabindex="-1"><a class="header-anchor" href="#基线"><span>基线</span></a></h3><p>最有效的调优方法是建立一个性能基线，如果出现性能问题，您可以将其用于比较。大多数数据库管理员 (DBA) 都非常了解他们的系统，并且可以轻松识别高峰使用期。</p><p>收集的基线数据应包括以下内容：</p><ul><li>应用程序统计信息（交易量、响应时间）</li><li>数据库统计</li><li>操作系统统计</li><li>磁盘 I/O 统计</li><li>网络统计</li></ul><p>在 Automatic Workload Repository 中，基线由一系列快照标识，这些快照被保留以供将来比较。</p><h3 id="症状和问题" tabindex="-1"><a class="header-anchor" href="#症状和问题"><span>症状和问题</span></a></h3><p>性能调优中的一个常见陷阱是将问题的症状误认为是实际问题本身。重要的是要认识到许多性能统计数据表明了症状，识别症状并不足以实施补救措施。例如：</p><ul><li>缓慢的物理 I/O</li></ul><p>通常，这是由配置不当的磁盘引起的。但是，它也可能是由于 SQL 调优不佳而在这些磁盘上发出的大量不必要的物理 I/O 造成的。</p><ul><li>闩锁竞争</li></ul><p>很少可以通过重新配置实例来调整闩锁争用。相反，闩锁争用通常通过应用程序更改来解决。</p><ul><li>CPU 使用率过高</li></ul><p>CPU 使用率过高通常意味着系统上几乎没有空闲的 CPU。这可能是由于系统规模不足、未调整的 SQL 语句或低效的应用程序引起的。</p><h3 id="何时调整" tabindex="-1"><a class="header-anchor" href="#何时调整"><span>何时调整</span></a></h3><h4 id="主动监控" tabindex="-1"><a class="header-anchor" href="#主动监控"><span>主动监控</span></a></h4><p>主动监控通常按定期安排的时间间隔进行，其中会检查多个性能统计信息以确定系统行为和资源使用情况是否发生了变化。主动监控也可以视为主动调优。</p><p>通常，监控不会导致系统配置更改，除非监控暴露出正在发展的严重问题。在某些情况下，有经验的性能工程师可以仅通过统计数据来识别潜在问题，尽管伴随的性能下降是很常见的。</p><p>在没有明显性能下降的情况下试验或调整系统，因为主动行动可能是一项危险的活动，会导致不必要的性能下降。调整系统应被视为反应式调整，并且应遵循反应式调整的步骤。</p><p>监控通常是更大容量规划活动的一部分，其中检查资源消耗以查看应用程序使用方式的变化，以及应用程序使用数据库和主机资源的方式。</p><h4 id="瓶颈消除" tabindex="-1"><a class="header-anchor" href="#瓶颈消除"><span>瓶颈消除</span></a></h4><p>调优通常意味着解决性能问题。然而，调优应该成为应用程序生命周期的一部分——贯穿分析、设计、编码、生产和维护阶段。通常，调优阶段会一直保留到数据库投入生产。此时，调优成为一个反应过程，其中最重要的瓶颈被识别并修复。</p><p>通常，调整的目的是减少资源消耗或减少完成操作所用的时间。无论哪种方式，目标都是提高特定资源的有效利用。通常，性能问题是由特定资源的过度使用引起的。过度使用的资源是系统的瓶颈。识别瓶颈和潜在修复有几个不同的阶段。这些将在以下各节中讨论。</p><p>请记住，不同形式的争用是可以通过在以下位置进行更改来修复的症状：</p><ul><li>应用程序的更改，或应用程序的使用方式</li><li>Oracle的变化</li><li>主机硬件配置的变化</li></ul><p>通常，解决瓶颈的最有效方法是更改​​应用程序。</p><h2 id="sql调优" tabindex="-1"><a class="header-anchor" href="#sql调优"><span>SQL调优</span></a></h2><p>联机事务处理 (OLTP) 应用程序发出的 SQL 语句一次对相对较少的行进行操作。如果一个索引可以精确指向所需的行，那么 Oracle 数据库就可以构建一个准确的计划，通过最短的可能路径有效地访问这些行。在决策支持系统 (DSS) 环境中，选择性不太重要，因为它们通常会访问表的大部分行。在这种情况下，全表扫描很常见，甚至不使用索引。</p><h4 id="查询优化器和执行计划" tabindex="-1"><a class="header-anchor" href="#查询优化器和执行计划"><span>查询优化器和执行计划</span></a></h4><p>当一条SQL语句在Oracle数据库上执行时，查询优化器在综合考虑了与引用的对象和查询中指定的条件相关的诸多因素后，确定了最高效的执行计划。此确定是处理任何 SQL 语句的重要步骤，并且会极大地影响执行时间。</p><p>在评估过程中，查询优化器审查系统上收集的统计数据以确定最佳数据访问路径和其他考虑因素。您可以使用在 SQL 语句中插入的提示来覆盖查询优化器的执行计划。</p><h2 id="性能调优功能和工具" tabindex="-1"><a class="header-anchor" href="#性能调优功能和工具"><span>性能调优功能和工具</span></a></h2><p>有效的数据收集和分析对于识别和纠正性能问题至关重要。Oracle 数据库提供了多种工具，允许性能工程师收集有关数据库性能的信息。除了收集数据之外，Oracle 数据库还提供了用于监视性能、诊断问题和调整应用程序的工具。</p><p>Oracle 数据库收集和监控功能主要是自动的，由 Oracle 后台进程管理。要启用自动统计信息收集和自动性能功能， <code>STATISTICS_LEVEL</code> 必须将初始化参数设置为 <code>TYPICAL</code> 或 <code>ALL</code> 。</p><h3 id="自动性能调整功能" tabindex="-1"><a class="header-anchor" href="#自动性能调整功能"><span>自动性能调整功能</span></a></h3><p>Oracle 数据库自动性能调优特性包括：</p><ul><li>自动工作负载存储库 (AWR) 收集、处理和维护性能统计数据，以用于问题检测和自我调整目的。</li><li>自动数据库诊断监视器 (ADDM) 分析 AWR 收集的信息，以发现 Oracle 数据库可能存在的性能问题。</li><li>SQL Tuning Advisor 提供了一种快速有效的技术来优化 SQL 语句，而无需修改任何语句。</li><li>SQL Access Advisor 提供有关物化视图、索引和物化视图日志的建议</li><li>端到端应用程序跟踪可按特定用户、服务或应用程序组件识别系统上的过多工作负载。</li><li>当检测到即将发生的问题时，服务器生成的警报会自动提供通知。</li><li>额外的可以从 Oracle Enterprise Manager Cloud Control (Cloud Control) 启动的顾问程序，例如用于优化实例内存的内存顾问程序。当没有为数据库设置自动内存管理时，通常使用内存顾问程序。其他顾问用于优化平均恢复时间 (MTTR)、缩减段和撤消表空间设置。</li><li>数据库Cloud Control 中的性能页面显示主机、实例服务时间和吞吐量信息，用于实时监控和诊断。</li></ul><h3 id="性能视图" tabindex="-1"><a class="header-anchor" href="#性能视图"><span>性能视图</span></a></h3><p>性能视图是所有 Oracle 数据库性能调优工具使用的性能信息源。这些视图基于在实例启动时初始化的内存结构。内存结构和表示它们的视图在实例的生命周期内由 Oracle 数据库自动维护。</p><h2 id="性能使用方法" tabindex="-1"><a class="header-anchor" href="#性能使用方法"><span>性能使用方法</span></a></h2><h3 id="准备数据库以进行调整" tabindex="-1"><a class="header-anchor" href="#准备数据库以进行调整"><span>准备数据库以进行调整</span></a></h3><ol><li><p>获取用户的反馈。</p></li><li><p>确定绩效项目的范围和后续的绩效目标，确定未来的绩效目标。此过程是未来容量规划的关键。</p></li><li><p>检查与用户性能相关的所有系统的操作系统。</p></li><li><p>检查未充分利用的硬件或操作系统资源。列出任何过度使用的资源，以便以后可能进行分析。此外，请确保所有硬件都正常运行。</p></li><li><p>确保初始化参数设置为（默认）或启用 Oracle 数据库的自动性能调整功能，包括 AWR 和 ADDM 。 <code>STATISTICS_LEVEL</code>应设置为<code>TYPICAL</code> 或 <code>ALL</code> 。</p></li><li><p>确保初始化参数设置为（默认）或启用 ADDM。 <code>CONTROL_MANAGEMENT_PACK_ACCESS</code> 应设置为 <code>DIAGNOSTIC+TUNINGDIAGNOSTIC</code> 。</p></li></ol><h3 id="主动调整数据库" tabindex="-1"><a class="header-anchor" href="#主动调整数据库"><span>主动调整数据库</span></a></h3><ol><li><p>查看 ADDM 结果，如自动数据库性能监视中所述。</p></li><li><p>对于每个 ADDM 结果，ADDM 都会自动提供减少性能问题影响的建议列表。实施建议将应用建议的更改以提高数据库性能。</p></li><li><p>实时监视数据库的性能问题，如监视实时数据库性能中所述。</p></li><li><p>响应与性能相关的警报，如监视性能警报中所述。</p></li><li><p>验证任何更改是否产生了所需的效果，并验证用户是否体验到性能改进。</p></li></ol><h3 id="被动调整数据库" tabindex="-1"><a class="header-anchor" href="#被动调整数据库"><span>被动调整数据库</span></a></h3><ol><li><p>手动运行 ADDM 以在用户报告性能问题时诊断当前和历史数据库性能，如手动数据库性能监视中所述。</p></li><li><p>解决暂时性性能问题，如解决暂时性性能问题中所述。使用活动会话历史记录 （ASH） 报告可以分析数据库的暂时性性能问题，这些问题存在时间很短，不会出现在 ADDM 分析中。</p></li><li><p>解决性能随时间推移而下降的问题，如解决性能随时间推移而下降的问题中所述。使用自动工作负载存储库 （AWR） 比较周期报告，可以比较两个时间段之间的数据库性能，并解决从一个时间段到另一个时间段可能发生的性能下降问题。</p></li><li><p>验证所做的更改是否产生了所需的效果，并验证用户是否体验到性能改进。</p></li><li><p>重复这些步骤，直到达到性能目标或由于其他限制而无法实现。</p></li></ol><h3 id="调整-sql-语句" tabindex="-1"><a class="header-anchor" href="#调整-sql-语句"><span>调整 SQL 语句</span></a></h3><ol><li><p>识别高负载 SQL 语句，如识别高负载 SQL 语句中所述。使用 ADDM 结果和“热门 SQL”部分来识别导致最大争用的高负载 SQL 语句。</p></li><li><p>调优高负载 SQL 语句，如调优 SQL 语句中所述。使用 SQL 优化顾问优化高负载 SQL 语句来提高这些语句的效率。</p></li><li><p>优化数据访问路径，如优化数据访问路径中所述。使用 SQL 访问顾问，可以为给定工作负荷创建一组适当的具体化视图、具体化视图日志和索引，从而优化数据访问路径的性能。</p></li><li><p>使用 SQL 性能分析器分析 SQL 优化和其他系统更改对 SQL 性能的影响。</p></li><li><p>重复这些步骤，直到调整所有高负载 SQL 语句以实现最高效率。</p></li></ol><h2 id="性能改进方法" tabindex="-1"><a class="header-anchor" href="#性能改进方法"><span>性能改进方法</span></a></h2><h3 id="性能改进步骤" tabindex="-1"><a class="header-anchor" href="#性能改进步骤"><span>性能改进步骤</span></a></h3><ol><li>执行以下初始标准检查：</li></ol><ul><li><p>从用户那里获得坦率的反馈。确定绩效项目的范围和后续绩效目标，以及未来的绩效目标。此过程是未来容量规划的关键。</p></li><li><p>当性能好坏时，从系统中获取全套操作系统、数据库和应用程序统计信息。如果这些都没有，那么就得到任何可用的东西。缺失的统计数据类似于犯罪现场缺失的证据：它们使侦探工作更加努力，也更加耗时。</p></li><li><p>健全性检查涉及用户性能的所有计算机的操作系统。通过对操作系统进行健全性检查，您可以查找得到充分利用的硬件或操作系统资源。将任何过度使用的资源列为症状，以便稍后进行分析。此外，检查所有硬件是否未显示任何错误或诊断信息。</p></li></ul><ol start="2"><li><p>检查 Oracle 数据库的十大最常见错误，并确定其中是否有可能是问题所在。将这些列为症状以供以后分析。包括这些是因为它们代表了最有可能的问题。ADDM 会自动检测并报告这十大问题中的九个。</p></li><li><p>使用症状作为线索来构建系统上发生的事情的概念模型，以了解导致性能问题的原因。</p></li><li><p>向系统提出一系列补救措施和预期行为，然后按照最有利于应用程序的顺序应用它们。ADDM 生成的建议均具有预期收益。性能工作的黄金法则是一次只改变一件事，然后衡量差异。不幸的是，系统停机要求可能会禁止这种严格的调查方法。如果同时应用多个更改，则尽量确保它们是隔离的，以便可以独立验证每个更改的影响。</p></li><li><p>验证所做的更改是否产生了预期的效果，并查看用户对性能的看法是否有所改善。否则，寻找更多的瓶颈，并继续完善概念模型，直到您对应用程序的理解变得更加准确。</p></li><li><p>重复最后三个步骤，直到达到性能目标或由于其他限制而变得不可能。</p></li></ol><p>此方法可识别最大的瓶颈，并使用客观的方法来改进性能。重点是通过提高应用程序效率和消除资源短缺和瓶颈来大幅提高性能。实例调优带来的性能提升极小（不到 10%），隔离应用程序低效问题带来的性能提升很大（100% 以上）。</p><h3 id="性能决策过程" tabindex="-1"><a class="header-anchor" href="#性能决策过程"><span>性能决策过程</span></a></h3><p>如何在不使用自动诊断功能的情况下查找瓶颈？</p><ol><li>单个用户在空载或轻载计算机上的响应时间/批处理运行时间是否可以接受？</li></ol><p>如果不可接受，则应用程序可能未经过优化编码或设计，并且在共享系统资源时在多用户情况下永远不会被接受。在这种情况下，获取应用程序内部统计信息，并获取 SQL Trace 和 SQL 计划信息。与开发人员一起调查数据、索引、事务 SQL 设计中的问题，以及可能将工作推迟到批处理和后台处理。</p><ol start="2"><li>是否所有 CPU 都被使用？</li></ol><p>如果内核利用率超过 40%，则调查操作系统的网络传输、分页、交换或进程抖动。继续检查用户空间中的 CPU 使用率，以验证系统上是否有任何消耗 CPU 的非数据库作业限制了共享 CPU 资源的数量，例如备份、文件转换、打印队列等。确定数据库使用了大部分 CPU 后，按 CPU 使用率调查排名靠前的 SQL。这些陈述构成了所有未来分析的基础。检查 SQL 和提交 SQL 的事务以获得最佳执行。Oracle 数据库以<code>V$SQL</code>和<code>V$SQLSTATS</code>.</p><p>如果应用程序是最佳的并且在 SQL 执行中不存在低效率，那么考虑将一些工作重新安排到非高峰时间或使用更大的计算机。</p><ol start="3"><li>此时系统性能不理想，CPU资源没有得到充分利用。</li></ol><p>在这种情况下，您在服务器中有序列化和不可扩展的行为。WAIT_EVENTS从服务器获取统计信息，确定最大的序列化点。如果没有序列化点，那么问题很可能在数据库之外，这应该是排查的重点。消除WAIT_EVENTS涉及修改应用程序 SQL 和调整数据库参数。这个过程是非常迭代的，需要能够WAIT_EVENTS系统地向下钻取以消除序列化点。</p><h3 id="oracle常见十大错误" tabindex="-1"><a class="header-anchor" href="#oracle常见十大错误"><span>Oracle常见十大错误</span></a></h3><ol><li>糟糕的连接管理</li></ol><p>应用程序为每个数据库交互连接和断开连接。这个问题在应用服务器中的无状态中间件中很常见。它对性能有超过两个数量级的影响，并且完全不可扩展。</p><ol start="2"><li>错误使用游标和共享池</li></ol><p>不使用游标会导致重复解析。如果不使用绑定变量，则对所有 SQL 语句进行硬解析。这对性能有一个数量级的影响，而且是完全不可扩展的。使用带有打开游标并多次执行它的绑定变量的游标。怀疑生成动态 SQL 的应用程序。</p><ol start="3"><li>糟糕的 SQL</li></ol><p>错误的 SQL 是使用了比应用程序要求更多的资源的 SQL。这可以是运行超过 24 小时的决策支持系统 (DSS) 查询，也可以是来自在线应用程序的超过一分钟的查询。您应该调查消耗大量系统资源的 SQL 以获得潜在的改进。ADDM 识别高负载 SQL。SQL Tuning Advisor 可以提供改进建议。</p><ol start="4"><li>使用非标准初始化参数</li></ol><p>这些可能是根据糟糕的建议或不正确的假设实施的。大多数数据库仅使用一组基本参数即可提供可接受的性能。特别是，与SPIN_COUNT锁存器相关的参数和未记录的优化器功能可能会导致大量问题，需要进行大量调查。初始化参数文件中设置的优化器参数可以覆盖已证明的最佳执行计划。由于这些原因，模式、模式统计信息和优化器设置应作为一个组进行管理，以确保性能的一致性。</p><ol start="5"><li>获取数据库 I/O 错误</li></ol><p>许多站点在可用磁盘上的数据库布局很差。其他站点错误地指定了磁盘数量，因为它们按磁盘空间而不是 I/O 带宽配置磁盘。</p><ol start="6"><li>联机重做日志设置问题</li></ol><p>许多站点运行时联机重做日志文件太少且文件太小。小的重做日志文件会导致系统检查点持续给缓冲区缓存和 I/O 系统带来高负载。如果存在的重做日志文件太少，则归档无法跟上，数据库必须等待归档器赶上。</p><ol start="7"><li><p>由于缺少空闲列表、空闲列表组、事务槽或缺少回滚段而导致缓冲区缓存中的数据块序列化。如有些将块大小提高到 8K 以上的应用程序或具有大量活动用户和少量回滚段的应用程序，可使用自动段空间管理 (ASSM) 和自动撤消管理来解决这个问题。</p></li><li><p>长全表扫描</p></li></ol><p>大容量或交互式在线操作的长时间全表扫描可能表明事务设计不佳、缺少索引或 SQL 优化不佳。长表扫描本质上是 I/O 密集型且不可扩展的。</p><ol start="9"><li>大量递归SQL</li></ol><p>执行的大量递归 SQL可能表明发生了空间管理活动，例如盘区分配。这是不可扩展的，会影响用户响应时间。使用本地管理的表空间来减少由于范围分配而导致的递归 SQL。在另一个用户 ID 下执行的递归 SQL 可能是 SQL 和 PL/SQL，这不是问题。</p><ol start="10"><li>部署和迁移错误</li></ol><p>在许多情况下，应用程序使用了太多资源，因为拥有表的模式尚未从开发环境或较旧的实现中成功迁移。这方面的示例包括缺少索引或不正确的统计信息。这些错误可能导致次优的执行计划和交互用户性能不佳。迁移已知性能的应用程序时，导出模式统计信息以使用DBMS_STATS包维护计划稳定性。</p><p>尽管 ADDM 没有直接检测到这些错误，但 ADDM 会突出显示生成的高负载 SQL。</p><h3 id="应急性能调整方法" tabindex="-1"><a class="header-anchor" href="#应急性能调整方法"><span>应急性能调整方法</span></a></h3><p>在紧急情况下，系统的一个组件发生了变化，将其从一个可靠的、可预测的系统转变为一个不可预测的、不能满足用户请求的系统。在这种情况下，性能工程师必须迅速确定发生了什么变化，并采取适当的措施尽快恢复正常服务。</p><h4 id="应急性能方法调整的步骤" tabindex="-1"><a class="header-anchor" href="#应急性能方法调整的步骤"><span>应急性能方法调整的步骤</span></a></h4><ol><li>调查性能问题并收集性能问题的症状。这个过程应该包括以下内容：</li></ol><ul><li><p>用户对系统表现不佳的反馈。问题是吞吐量还是响应时间?</p></li><li><p>了解性能配置变化。</p></li><li><p>使用自动调整功能来诊断和监控问题（Top SQL, Top Session）。</p></li></ul><ol start="2"><li><p>完整性检查应用系统所有组件的硬件利用率。检查 CPU 使用率最高的位置，并检查所有系统组件的磁盘、内存使用情况和网络性能。此快速过程可确定导致问题的层。如果问题在应用程序中，则将分析转移到应用程序调试。否则，继续进行数据库服务器分析。</p></li><li><p>确定数据库服务器是否在 CPU 上受到限制，或者它是否正在花费时间等待等待事件。</p></li></ol><p>如果数据库服务器受 CPU 限制，则调查以下内容：</p><ul><li><p>在操作系统级别和数据库消耗大量 CPU 的会话；检查<code>V$SESS_TIME_MODEL</code>数据库 CPU 使用率</p></li><li><p>在数据库级别执行许多缓冲区获取的会话或语句；检查<code>V$SESSTAT</code>和<code>V$SQLSTATS</code></p></li><li><p>执行计划更改导致次优 SQL 执行；这些可能很难找到</p></li><li><p>初始化参数设置错误</p></li><li><p>代码变更或所有组件升级导致的算法问题</p></li></ul><p>如果数据库会话正在等待事件，则按照中列出的等待事件<code>V$SESSION_WAIT</code>来确定导致序列化的原因。该<code>V$ACTIVE_SESSION_HISTORY</code>视图包含会话活动的采样历史记录，即使在事件结束并且系统已恢复正常操作后，您也可以使用它来执行诊断。在大量争用库缓存的情况下，可能无法登录数据库或将 SQL 提交到数据库。在这种情况下，使用历史数据来确定为什么突然争用这个latch。如果大多数等待是为了 I/O，则检查<code>V$ACTIVE_SESSION_HISTORY</code>以确定执行所有输入和输出的会话正在运行的 SQL。</p><ol start="4"><li><p>采取紧急行动以稳定系统。这可能涉及使部分应用程序脱机或限制可应用于系统的工作负载的操作。它还可能涉及系统重新启动或正在进行的作业的终止。这些自然会影响服务水平。</p></li><li><p>验证系统是否稳定。对系统进行更改和限制后，验证系统现在是否稳定，并为数据库收集一组参考统计信息。现在按照本书前面描述的严格性能方法将所有功能和用户带回系统。此过程在完成之前可能需要进行大量的应用程序重新设计。</p></li></ol><h2 id="数据库配置" tabindex="-1"><a class="header-anchor" href="#数据库配置"><span>数据库配置</span></a></h2><h3 id="初始实例配置" tabindex="-1"><a class="header-anchor" href="#初始实例配置"><span>初始实例配置</span></a></h3><h4 id="初始化参数" tabindex="-1"><a class="header-anchor" href="#初始化参数"><span>初始化参数</span></a></h4><ul><li>不影响性能的必要初始化参数</li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>DB_NAME</td><td>数据库的名称。这应该与环境变量匹配。ORACLE_SID</td></tr><tr><td>DB_DOMAIN</td><td>互联网点表示法中数据库的位置。</td></tr><tr><td>OPEN_CURSORS</td><td>限制每个会话的最大游标数（活动 SQL 语句）。该设置取决于应用程序;建议使用 500。</td></tr><tr><td>CONTROL_FILES</td><td>设置为在不同磁盘驱动器上至少包含两个文件，以防止因控制文件丢失而导致故障。</td></tr><tr><td>DB_FILES</td><td>设置为可分配给数据库的最大文件数。</td></tr></tbody></table><ul><li>影响性能的重要初始化参数</li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>COMPATIBLE</td><td>指定 Oracle 数据库必须保持兼容性的版本。它允许您立即在生产系统中利用新版本的维护改进，而无需测试环境中的新功能。如果您的应用程序是为特定版本的 Oracle 数据库设计的，并且您实际上正在安装更高版本，则可能需要将此参数设置为早期版本的版本。</td></tr><tr><td>DB_BLOCK_SIZE</td><td>设置存储在数据库文件中并缓存在 SGA 中的 Oracle 数据库块的大小。值的范围取决于操作系统，但对于事务处理系统，它通常是 8192，对于数据库仓库系统，它的值更高。</td></tr><tr><td>SGA_TARGET</td><td>指定所有 SGA 组件的总大小。如果指定，则会自动调整缓冲区高速缓存 （）、Java 池 （）、大型池 （） 和共享池 （） 内存池的大小。SGA_TARGETDB_CACHE_SIZEJAVA_POOL_SIZELARGE_POOL_SIZESHARED_POOL_SIZE</td></tr><tr><td>PGA_AGGREGATE_TARGET</td><td>指定附加到实例的所有服务器进程可用的目标聚合 PGA 内存。</td></tr><tr><td>PROCESSES</td><td>设置该实例可以启动的最大进程数。这是要设置的最重要的主要参数，因为从中推导出许多其他参数值。</td></tr><tr><td>SESSIONS</td><td>这是默认情况下根据进程的值设置的。但是，如果您使用的是共享服务器，则推导的值可能不足。</td></tr><tr><td>UNDO_MANAGEMENT</td><td>指定数据库使用的撤消空间管理模式。缺省值为 。如果未指定，数据库将使用 .AUTOAUTO</td></tr><tr><td>UNDO_TABLESPACE</td><td>指定实例启动时要使用的撤消表空间。</td></tr></tbody></table><h4 id="撤销表空间" tabindex="-1"><a class="header-anchor" href="#撤销表空间"><span>撤销表空间</span></a></h4><p>数据库使用撤消空间来存储用于读取一致性、恢复和回滚语句的数据。此数据存在于一个或多个撤消表空间中。如果使用数据库配置助手 （DBCA） 创建数据库，那么将自动创建撤消表空间。</p><p>为了自动管理撤消数据，Oracle 数据库使用自动撤消管理，以透明方式创建和管理撤消段。要启用自动撤消管理，请将初始化参数设置为 （默认设置 <code>UNDO_MANAGEMENT=AUTO</code>）。如果未指定，则初始化参数使用该设置。Oracle 强烈建议使用自动撤消管理，因为它显著简化了数据库管理，并且无需对撤消（回滚）段进行任何手动调整。支持使用回滚段进行手动撤消管理，以实现向后兼容性。</p><h4 id="重做日志文件" tabindex="-1"><a class="header-anchor" href="#重做日志文件"><span>重做日志文件</span></a></h4><p>重做日志文件的大小会影响性能，因为数据库编写器和归档程序进程的行为取决于重做日志的大小。通常，较大的重做日志文件提供更好的性能。日志文件大小过小会增加检查点活动并降低性能。</p><p>尽管重做日志文件的大小不会影响 LGWR 性能，但它可能会影响 DBWR 和检查点行为。 检查点频率受多种因素影响，包括日志文件大小和初始化参数的设置。如果该参数设置为限制实例恢复时间，Oracle 数据库将根据需要自动尝试检查点。在这种情况下，日志文件的大小应足够大，以避免由于日志文件大小不足而导致额外的检查点。可以通过从视图中查询列来获得最佳大小。您还可以在 Oracle 企业管理器云控制（云控制）的重做日志组页面上获取大小调整建议。</p><p>可能并不总是能够为重做日志文件提供特定大小的建议，但重做日志文件的范围在 100 MB 到几 GB 之间被认为是合理的。根据系统生成的重做量调整联机重做日志文件的大小。粗略的指南是最多每 20 分钟切换一次日志文件。</p><h4 id="表空间" tabindex="-1"><a class="header-anchor" href="#表空间"><span>表空间</span></a></h4><h5 id="永久表空间" tabindex="-1"><a class="header-anchor" href="#永久表空间"><span>永久表空间</span></a></h5><p>对于永久表空间，Oracle 建议使用自动段空间管理。此类表空间（通常称为位图表空间）是具有位图段空间管理的本地管理的表空间。</p><h5 id="临时表空间" tabindex="-1"><a class="header-anchor" href="#临时表空间"><span>临时表空间</span></a></h5><p>正确配置临时表空间有助于优化磁盘排序性能。临时表空间可以是字典管理的，也可以是本地管理的。Oracle 建议使用扩展数据块大小为 1 MB 的本地管理的临时表空间。</p>',114),r=[p];function n(d,c){return e(),i("div",null,r)}const s=l(t,[["render",n],["__file","performance.html.vue"]]),S=JSON.parse('{"path":"/guide/database/oracle/performance/performance.html","title":"性能优化概述","lang":"zh-CN","frontmatter":{"title":"性能优化概述","description":"实例优化 实例调优思路 CPU 性能问题 使用 Oracle 数据库资源管理器通过确定 CPU 资源分配的优先级来降低峰值负载使用模式的影响 避免运行过多使用大量 CPU 的进程 增加硬件容量，包括更改系统架构 内存性能问题 使用自动内存管理在系统全局区域 （SGA） 和聚合程序全局区域（PGA 聚合）之间自动管理和分配内存。 使用内存顾问设置 SGA...","head":[["meta",{"property":"og:url","content":"https://github.com/abelit/abelit-datapeacock.git/guide/database/oracle/performance/performance.html"}],["meta",{"property":"og:site_name","content":"数之雀"}],["meta",{"property":"og:title","content":"性能优化概述"}],["meta",{"property":"og:description","content":"实例优化 实例调优思路 CPU 性能问题 使用 Oracle 数据库资源管理器通过确定 CPU 资源分配的优先级来降低峰值负载使用模式的影响 避免运行过多使用大量 CPU 的进程 增加硬件容量，包括更改系统架构 内存性能问题 使用自动内存管理在系统全局区域 （SGA） 和聚合程序全局区域（PGA 聚合）之间自动管理和分配内存。 使用内存顾问设置 SGA..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T14:06:18.000Z"}],["meta",{"property":"article:author","content":"Abelit"}],["meta",{"property":"article:modified_time","content":"2024-05-11T14:06:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"性能优化概述\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-11T14:06:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Abelit\\",\\"url\\":\\"https://github.com/abelit\\"}]}"]]},"headers":[{"level":2,"title":"实例优化","slug":"实例优化","link":"#实例优化","children":[{"level":3,"title":"实例调优思路","slug":"实例调优思路","link":"#实例调优思路","children":[]},{"level":3,"title":"基线","slug":"基线","link":"#基线","children":[]},{"level":3,"title":"症状和问题","slug":"症状和问题","link":"#症状和问题","children":[]},{"level":3,"title":"何时调整","slug":"何时调整","link":"#何时调整","children":[]}]},{"level":2,"title":"SQL调优","slug":"sql调优","link":"#sql调优","children":[]},{"level":2,"title":"性能调优功能和工具","slug":"性能调优功能和工具","link":"#性能调优功能和工具","children":[{"level":3,"title":"自动性能调整功能","slug":"自动性能调整功能","link":"#自动性能调整功能","children":[]},{"level":3,"title":"性能视图","slug":"性能视图","link":"#性能视图","children":[]}]},{"level":2,"title":"性能使用方法","slug":"性能使用方法","link":"#性能使用方法","children":[{"level":3,"title":"准备数据库以进行调整","slug":"准备数据库以进行调整","link":"#准备数据库以进行调整","children":[]},{"level":3,"title":"主动调整数据库","slug":"主动调整数据库","link":"#主动调整数据库","children":[]},{"level":3,"title":"被动调整数据库","slug":"被动调整数据库","link":"#被动调整数据库","children":[]},{"level":3,"title":"调整 SQL 语句","slug":"调整-sql-语句","link":"#调整-sql-语句","children":[]}]},{"level":2,"title":"性能改进方法","slug":"性能改进方法","link":"#性能改进方法","children":[{"level":3,"title":"性能改进步骤","slug":"性能改进步骤","link":"#性能改进步骤","children":[]},{"level":3,"title":"性能决策过程","slug":"性能决策过程","link":"#性能决策过程","children":[]},{"level":3,"title":"Oracle常见十大错误","slug":"oracle常见十大错误","link":"#oracle常见十大错误","children":[]},{"level":3,"title":"应急性能调整方法","slug":"应急性能调整方法","link":"#应急性能调整方法","children":[]}]},{"level":2,"title":"数据库配置","slug":"数据库配置","link":"#数据库配置","children":[{"level":3,"title":"初始实例配置","slug":"初始实例配置","link":"#初始实例配置","children":[]}]}],"git":{"createdTime":1715436378000,"updatedTime":1715436378000,"contributors":[{"name":"ableit","email":"ychenid@live.com","commits":1}]},"readingTime":{"minutes":24.38,"words":7314},"filePathRelative":"guide/database/oracle/performance/performance.md","localizedDate":"2024年5月11日","autoDesc":true,"excerpt":"<h2>实例优化</h2>\\n<h3>实例调优思路</h3>\\n<ul>\\n<li>\\n<p>CPU 性能问题</p>\\n<ul>\\n<li>使用 Oracle 数据库资源管理器通过确定 CPU 资源分配的优先级来降低峰值负载使用模式的影响</li>\\n<li>避免运行过多使用大量 CPU 的进程</li>\\n<li>增加硬件容量，包括更改系统架构</li>\\n</ul>\\n</li>\\n<li>\\n<p>内存性能问题</p>\\n<ul>\\n<li>使用自动内存管理在系统全局区域 （SGA） 和聚合程序全局区域（PGA 聚合）之间自动管理和分配内存。</li>\\n<li>使用内存顾问设置 SGA 和 PGA 内存目标值。</li>\\n<li>使用自动 PGA 管理来管理 SQL 内存执行。</li>\\n<li>避免运行过多消耗大量内存的进程。</li>\\n<li>减少分页或交换。</li>\\n<li>通过游标共享减少打开游标和硬解析的数量。</li>\\n</ul>\\n</li>\\n<li>\\n<p>磁盘 I/O 性能问题</p>\\n<ul>\\n<li>使用 Oracle 自动存储管理 （Oracle ASM） 管理数据库存储。</li>\\n<li>跨每个磁盘对所有内容进行条带化以分发 I/O。</li>\\n<li>将存档的重做日志和联机重做日志等文件移动到单独的磁盘。</li>\\n<li>将所需数据存储在内存中以减少物理 I/O 的数量。</li>\\n</ul>\\n</li>\\n</ul>"}');export{s as comp,S as data};
