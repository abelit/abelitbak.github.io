import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as c,c as n,a as e,d as i,b as l,w as t,f as h}from"./app-DR5J2daJ.js";const r="/assets/tiflash-resource-usage-CRauVHsD.png",d="/assets/ch-2tiflash-op-DM9Gkake.png",p="/assets/tiflash_request_duration_by_type-B_ZM01f4.png",u="/assets/ch-2tiflash-raft-io-flow-DImwDyP-.png",T="/assets/ch-1tiflash-raft-io-flow-cloud-C2xjZxwJ.png",m={},f=e("h1",{id:"tiflash-性能分析和优化方法",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#tiflash-性能分析和优化方法"},[e("span",null,"TiFlash 性能分析和优化方法")])],-1),F=e("h2",{id:"tiflash-集群资源利用率",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#tiflash-集群资源利用率"},[e("span",null,"TiFlash 集群资源利用率")])],-1),_=e("p",null,"通过以下三个指标，你可以快速判断 TiFlash 集群的资源使用率：",-1),g=e("ul",null,[e("li",null,"CPU：每个 TiFlash 实例的 CPU 使用率"),e("li",null,"Memory：每个 TiFlash 实例内存的使用情况"),e("li",null,"IO utilization：每个 TiFlash 实例的 IO 使用率")],-1),P=h('<p>该 TiFlash 集群包含两个节点，每个节点配置均为 16 核、48G 内存。当 CH-benCHmark 负载运行时，CPU 利用率最高可达到 1500%，内存占用最大可达 20 GB，IO 利用率达到 91%。这表明 TiFlash 节点资源接近饱和状态。</p><figure><img src="'+r+'" alt="CH-TiFlash-MPP" tabindex="0" loading="lazy"><figcaption>CH-TiFlash-MPP</figcaption></figure><h2 id="tiflash-关键性能指标" tabindex="-1"><a class="header-anchor" href="#tiflash-关键性能指标"><span>TiFlash 关键性能指标</span></a></h2><h3 id="吞吐指标" tabindex="-1"><a class="header-anchor" href="#吞吐指标"><span>吞吐指标</span></a></h3><p>通过以下指标，你可以了解 TiFlash 的吞吐情况：</p><ul><li>MPP Query count：每个 TiFlash 实例 MPP 查询数量的瞬时值，表示当前 TiFlash 实例需要处理的 MPP 查询数量（包括正在处理的以及还没被调度到的）。</li><li>Request QPS：所有 TiFlash 实例收到的 coprocessor 请求数量。 <ul><li><code>run_mpp_task</code>、<code>dispatch_mpp_task</code> 和 <code>mpp_establish_conn</code> 为 MPP 请求。</li><li><code>batch</code>：batch 请求数量。</li><li><code>cop</code>：直接通过 coprocessor 接口发送的 coprocessor 请求数量。</li><li><code>cop_execution</code>：正在执行的 coprocessor 请求数量。</li><li><code>remote_read</code>、<code>remote_read_constructed</code> 和 <code>remote_read_sent</code> 为 remote read 相关指标，remote read 增多一般意味着系统出现了问题。</li></ul></li><li>Executor QPS：所有 TiFlash 实例收到的请求中，每种 dag 算子的数量，其中 <code>table_scan</code> 是扫表算子，<code>selection</code> 是过滤算子，<code>aggregation</code> 是聚合算子，<code>top_n</code> 是 TopN 算子，<code>limit</code> 是 limit 算子，<code>join</code> 为关联算子，<code>exchange_sender</code> 和 <code>exchange_receiver</code> 为数据发送和接收算子。</li></ul><h3 id="延迟指标" tabindex="-1"><a class="header-anchor" href="#延迟指标"><span>延迟指标</span></a></h3><p>通过以下指标，你可以了解 TiFlash 的延迟处理情况：</p><ul><li><p>Request Duration Overview：每秒所有 TiFlash 实例处理所有请求类型的总时长堆叠图。</p><ul><li><p>如果请求类型为 <code>run_mpp_task</code>、<code>dispatch_mpp_task</code> 或 <code>mpp_establish_conn</code>，说明 SQL 语句的执行已经部分或者完全下推到 TiFlash 上进行，通常包含 join 和数据分发的操作，这是 TiFlash 最常见的请求类型。</p></li><li><p>如果请求类型为 <code>cop</code>，说明整个语句并没有完全下推到 TiFlash，通常 TiDB 会将全表扫描算子下推到 TiFlash 上进行数据访问和过滤。在堆叠图中，如果 <code>cop</code> 占据主导地位，需要仔细权衡是否合理。</p><ul><li>如果 SQL 访问的数据量很大，优化器可能根据成本模型估算 TiFlash 全表扫描的成本更低。</li><li>如果表结构缺少合适的索引，即使访问的数据量很少，优化器也只能将查询下推到 TiFlash 进行全表扫描。在这种情况下，创建合适的索引，通过 TiKV 访问数据更加高效。</li></ul></li></ul></li><li><p>Request Duration：所有 TiFlash 实例每种 MPP 和 coprocessor 请求类型的总处理时间，包含平均和 P99 处理延迟。</p></li><li><p>Request Handle Duration：指 <code>cop</code> 和 <code>batch cop</code> 从开始执行到执行结束的时间，不包括等待时间，只包含 <code>cop</code> 和 <code>batch cop</code> 两种类型，包含平均和 P99 延迟。</p></li></ul><p>示例 1 ：TiFlash MPP 请求处理时间概览</p><p>如下图所示，在此负载中，<code>run_mpp_task</code> 和 <code>mpp_establish_conn</code> 请求的处理时间占比最高，表明大部分请求都是完全下推到 TiFlash 上执行的 MPP 任务。</p><p>而 <code>cop</code> 请求处理时间占比较小，说明存在一部分请求是通过 coprocessor 下推到 TiFlash 上进行数据访问和过滤的。</p><figure><img src="'+d+'" alt="CH-TiFlash-MPP" tabindex="0" loading="lazy"><figcaption>CH-TiFlash-MPP</figcaption></figure><p>示例 2 ：TiFlash <code>cop</code> 请求处理时间占比高</p><p>如下图所示，在此负载中，<code>cop</code> 请求的处理时间占比最高，可以通过查看 SQL 执行计划来确认 <code>cop</code> 请求产生的原因。</p><figure><img src="'+p+'" alt="Cop" tabindex="0" loading="lazy"><figcaption>Cop</figcaption></figure><h3 id="raft-相关指标" tabindex="-1"><a class="header-anchor" href="#raft-相关指标"><span>Raft 相关指标</span></a></h3><p>通过以下指标，你可以了解 TiFlash 的 Raft 同步情况：</p><ul><li><p>Raft Wait Index Duration：所有 TiFlash 实例等待本地 Region index &gt;= read_index 所花费的时间，即进行 wait_index 操作的延迟。如果 Wait Index 延迟过高，说明 TiKV 和 TiFlash 之间数据同步存在明显的延迟，可能的原因包括：</p><ul><li>TiKV 资源过载</li><li>TiFlash 资源过载，特别是 IO 资源</li><li>TiKV 和 TiFlash 之间存在网络瓶颈</li></ul></li><li><p>Raft Batch Read Index Duration：所有 TiFlash 实例 <code>read_index</code> 的延迟。如果该指标过高，说明 TiFlash 和 TiKV 之间的交互速度较慢，可能的原因包括：</p><ul><li>TiFlash 资源过载</li><li>TiKV 资源过载</li><li>TiFlash 和 TiKV 之间存在网络瓶颈</li></ul></li></ul><h3 id="io-流量指标" tabindex="-1"><a class="header-anchor" href="#io-流量指标"><span>IO 流量指标</span></a></h3><p>通过以下指标，你可以了解 TiFlash 的 IO 流量情况：</p><ul><li><p>Write Throughput By Instance：每个 TiFlash 实例写入数据的吞吐量，包括 apply Raft 数据日志以及 Raft 快照的写入吞吐量。</p></li><li><p>Write flow：所有 TiFlash 实例磁盘写操作的流量。</p><ul><li>File Descriptor：TiFlash 所使用的 DeltaTree 存储引擎的稳定层。</li><li>Page：指 Pagestore，TiFlash 所使用的 DeltaTree 存储引擎的 Delta 变更层。</li></ul></li><li><p>Read flow：所有 TiFlash 实例磁盘读操作的流量。</p><ul><li>File Descriptor：TiFlash 所使用的 DeltaTree 存储引擎的稳定层。</li><li>Page：指 Pagestore，TiFlash 所使用的 DeltaTree 存储引擎的 Delta 变更层。</li></ul></li></ul><p>你可以通过 <code>(Read flow + Write flow) ÷ 总的 Write Throughput By Instance</code> 计算出整个 TiFlash 集群的写放大倍数。</p>',23),b=e("p",null,"如下图所示，该 TiFlash 集群的 Raft Wait Index Duration 和 Raft Batch Read Index Duration 的 99 分位数较高，分别为 3.24 秒和 753 毫秒。这是因为该集群的 TiFlash 负载较高，数据同步存在延迟。",-1),x=e("p",null,"该集群包含两个 TiFlash 节点，每秒 TiKV 同步到 TiFlash 的增量数据约为 28 MB。稳定层 (File Descriptor) 的文件描述符最大写流量为 939 MB/s，最大读流量为 1.1 GiB/s，而 Delta 层 (Page) 最大写流量为 74 MB/s，最大读流量为 111 MB/s。该环境中的 TiFlash 使用独立的 NVME 盘，具有较强的 IO 吞吐能力。",-1),C=e("figure",null,[e("img",{src:u,alt:"CH-2TiFlash-OP",tabindex:"0",loading:"lazy"}),e("figcaption",null,"CH-2TiFlash-OP")],-1),y=e("p",null,"如下图所示，Raft Wait Index Duration 等待时间 99 分位数最高为 438 毫秒，Raft Batch Read Index Duration 等待时间 99 分位数最高为 125 毫秒。该集群只有一个 TiFlash 节点，每秒 TiKV 同步到 TiFlash 的增量数据约为 5 MB。稳定层 (File Descriptor) 的最大写入流量为 78 MB/s，最大读取流量为 221 MB/s，Delta 层 (Page) 最大写入流量为 8 MB/s，最大读取流量为 18 MB/s。这个环境中的 TiFlash 使用的是 AWS EBS 云盘，其 IO 吞吐能力相对较弱。",-1),k=e("figure",null,[e("img",{src:T,alt:"CH-TiFlash-MPP",tabindex:"0",loading:"lazy"}),e("figcaption",null,"CH-TiFlash-MPP")],-1);function M(D,R){const a=s("RouteLink");return c(),n("div",null,[f,e("p",null,[i("本文介绍 TiFlash 资源使用率和关键的性能指标。你可以通过 Performance Overview 面板中的 "),l(a,{to:"/grafana-performance-overview-dashboard.html#tiflash"},{default:t(()=>[i("TiFlash 面板")]),_:1}),i("，来监控和评估 TiFlash 集群的性能。")]),F,_,g,e("p",null,[i("示例："),l(a,{to:"/benchmark/benchmark-tidb-using-ch.html"},{default:t(()=>[i("CH-benCHmark 负载")]),_:1}),i("资源使用率")]),P,e("p",null,[i("示例 1 ："),l(a,{to:"/benchmark/benchmark-tidb-using-ch.html"},{default:t(()=>[i("CH-benCHmark 负载")]),_:1}),i("本地部署环境 Raft 和 IO 指标")]),b,x,C,e("p",null,[i("示例 2 ："),l(a,{to:"/benchmark/benchmark-tidb-using-ch.html"},{default:t(()=>[i("CH-benCHmark 负载")]),_:1}),i(" 公有云环境 Raft 和 IO 指标")]),y,k])}const B=o(m,[["render",M],["__file","tiflash-performance-tuning-methods.html.vue"]]),O=JSON.parse('{"path":"/guide/database/tidb/deployments/test/tiflash-performance-tuning-methods.html","title":"TiFlash 性能分析和优化方法","lang":"zh-CN","frontmatter":{"title":"TiFlash 性能分析和优化方法","description":"TiFlash 性能分析和优化方法 本文介绍 TiFlash 资源使用率和关键的性能指标。你可以通过 Performance Overview 面板中的 ，来监控和评估 TiFlash 集群的性能。 TiFlash 集群资源利用率 通过以下三个指标，你可以快速判断 TiFlash 集群的资源使用率： CPU：每个 TiFlash 实例的 CPU 使用率...","head":[["meta",{"property":"og:url","content":"https://github.com/abelit/abelit-datapeacock.git/guide/database/tidb/deployments/test/tiflash-performance-tuning-methods.html"}],["meta",{"property":"og:site_name","content":"数之雀"}],["meta",{"property":"og:title","content":"TiFlash 性能分析和优化方法"}],["meta",{"property":"og:description","content":"TiFlash 性能分析和优化方法 本文介绍 TiFlash 资源使用率和关键的性能指标。你可以通过 Performance Overview 面板中的 ，来监控和评估 TiFlash 集群的性能。 TiFlash 集群资源利用率 通过以下三个指标，你可以快速判断 TiFlash 集群的资源使用率： CPU：每个 TiFlash 实例的 CPU 使用率..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T14:06:18.000Z"}],["meta",{"property":"article:author","content":"Abelit"}],["meta",{"property":"article:modified_time","content":"2024-05-11T14:06:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TiFlash 性能分析和优化方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-11T14:06:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Abelit\\",\\"url\\":\\"https://github.com/abelit\\"}]}"]]},"headers":[{"level":2,"title":"TiFlash 集群资源利用率","slug":"tiflash-集群资源利用率","link":"#tiflash-集群资源利用率","children":[]},{"level":2,"title":"TiFlash 关键性能指标","slug":"tiflash-关键性能指标","link":"#tiflash-关键性能指标","children":[{"level":3,"title":"吞吐指标","slug":"吞吐指标","link":"#吞吐指标","children":[]},{"level":3,"title":"延迟指标","slug":"延迟指标","link":"#延迟指标","children":[]},{"level":3,"title":"Raft 相关指标","slug":"raft-相关指标","link":"#raft-相关指标","children":[]},{"level":3,"title":"IO 流量指标","slug":"io-流量指标","link":"#io-流量指标","children":[]}]}],"git":{"createdTime":1715436378000,"updatedTime":1715436378000,"contributors":[{"name":"ableit","email":"ychenid@live.com","commits":1}]},"readingTime":{"minutes":5.66,"words":1698},"filePathRelative":"guide/database/tidb/deployments/test/tiflash-performance-tuning-methods.md","localizedDate":"2024年5月11日","autoDesc":true,"excerpt":"\\n<p>本文介绍 TiFlash 资源使用率和关键的性能指标。你可以通过 Performance Overview 面板中的 <a href=\\"/grafana-performance-overview-dashboard.html#tiflash\\" target=\\"_blank\\">TiFlash 面板</a>，来监控和评估 TiFlash 集群的性能。</p>\\n<h2>TiFlash 集群资源利用率</h2>\\n<p>通过以下三个指标，你可以快速判断 TiFlash 集群的资源使用率：</p>\\n<ul>\\n<li>CPU：每个 TiFlash 实例的 CPU 使用率</li>\\n<li>Memory：每个 TiFlash 实例内存的使用情况</li>\\n<li>IO utilization：每个 TiFlash 实例的 IO 使用率</li>\\n</ul>"}');export{B as comp,O as data};
