import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as r,c as d,a as n,d as e,b as s,w as l,f as t}from"./app-DR5J2daJ.js";const k="/assets/internalLoadBalancer-CY6vpCIS.png",b={},h={href:"https://github.com/kubesphere/kubekey",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"本教程演示了在 Linux 上安装 KubeSphere 时，使用 KubeKey 内置高可用模式部署的大体配置。",-1),m=n("h2",{id:"架构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#架构"},[n("span",null,"架构")])],-1),g={href:"https://kubesphere.io/zh/docs/v3.3/installing-on-linux/introduction/multioverview/",target:"_blank",rel:"noopener noreferrer"},y=t('<figure><img src="'+k+`" alt="高可用架构" tabindex="0" loading="lazy"><figcaption>高可用架构</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在生产环境中，请确保准备了 6 台 Linux 机器，其中 3 台充当主节点，另外 3 台充当工作节点。</p></div><h2 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖"><span>安装依赖</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> conntrack socat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="下载-kubekey" tabindex="-1"><a class="header-anchor" href="#下载-kubekey"><span>下载 KubeKey</span></a></h2><p>请按照以下步骤下载 KubeKey。</p>`,6),_={href:"https://github.com/kubesphere/kubekey/releases",target:"_blank",rel:"noopener noreferrer"},f=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"curl"),e(),n("span",{class:"token parameter variable"},"-sfL"),e(" https://get-kk.kubesphere.io "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token assign-left variable"},"VERSION"),n("span",{class:"token operator"},"="),e("v3.0.10 "),n("span",{class:"token function"},"sh"),e(` -
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),K=n("p",null,null,-1),x=n("p",null,"先执行以下命令以确保您从正确的区域下载 KubeKey。",-1),A=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token builtin class-name"},"export"),e(),n("span",{class:"token assign-left variable"},"KKZONE"),n("span",{class:"token operator"},"="),e(`cn
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),w=n("p",null,"执行以下命令下载 KubeKey：",-1),S=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"curl"),e(),n("span",{class:"token parameter variable"},"-sfL"),e(" https://get-kk.kubesphere.io "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token assign-left variable"},"VERSION"),n("span",{class:"token operator"},"="),e("v3.0.10 "),n("span",{class:"token function"},"sh"),e(` -
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),T=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"提示"),n("p",null,[e("在您下载 KubeKey 后，如果您将其传至新的机器，且访问 Googleapis 同样受限，在您执行以下步骤之前请务必再次执行 "),n("code",null,"export KKZONE=cn"),e(" 命令。")])],-1),H=n("p",null,null,-1),I=t(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>执行以上命令会下载最新版 KubeKey，您可以修改命令中的版本号下载指定版本。</p></div><p>为 <code>kk</code> 添加可执行权限：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x kk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建包含默认配置的示例配置文件。这里使用 Kubernetes v1.22.12 作为示例。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./kk create config --with-kubesphere v3.4.0 --with-kubernetes v1.26.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),N={class:"hint-container tip"},P=n("p",{class:"hint-container-title"},"提示",-1),C={href:"https://kubesphere.io/zh/docs/v3.3/installing-on-linux/introduction/kubekey/#%e6%94%af%e6%8c%81%e7%9f%a9%e9%98%b5",target:"_blank",rel:"noopener noreferrer"},G=n("li",null,[n("p",null,[e("如果您在这一步的命令中不添加标志 "),n("code",null,"--with-kubesphere"),e("，则不会部署 KubeSphere，只能使用配置文件中的 "),n("code",null,"addons"),e(" 字段安装，或者在您后续使用 "),n("code",null,"./kk create cluster"),e(" 命令时再次添加这个标志。")])],-1),z=n("li",null,[n("p",null,[e("如果您添加标志 "),n("code",null,"--with-kubesphere"),e(" 时不指定 KubeSphere 版本，则会安装最新版本的 KubeSphere。")])],-1),E=t(`<h2 id="部署-kubesphere-和-kubernetes" tabindex="-1"><a class="header-anchor" href="#部署-kubesphere-和-kubernetes"><span>部署 KubeSphere 和 Kubernetes</span></a></h2><p>运行以上命令后，会创建一个配置文件 <code>config-sample.yaml</code>。编辑该文件以添加机器信息、配置负载均衡器和其他内容。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果您自定义文件名，文件名称可能会不同。</p></div><h3 id="config-sample-yaml-示例" tabindex="-1"><a class="header-anchor" href="#config-sample-yaml-示例"><span>config-sample.yaml 示例</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> master1<span class="token punctuation">,</span> <span class="token key atrule">address</span><span class="token punctuation">:</span> 192.168.0.2<span class="token punctuation">,</span> <span class="token key atrule">internalAddress</span><span class="token punctuation">:</span> 192.168.0.2<span class="token punctuation">,</span> <span class="token key atrule">user</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> Testing123<span class="token punctuation">}</span>
  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> master2<span class="token punctuation">,</span> <span class="token key atrule">address</span><span class="token punctuation">:</span> 192.168.0.3<span class="token punctuation">,</span> <span class="token key atrule">internalAddress</span><span class="token punctuation">:</span> 192.168.0.3<span class="token punctuation">,</span> <span class="token key atrule">user</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> Testing123<span class="token punctuation">}</span>
  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> master3<span class="token punctuation">,</span> <span class="token key atrule">address</span><span class="token punctuation">:</span> 192.168.0.4<span class="token punctuation">,</span> <span class="token key atrule">internalAddress</span><span class="token punctuation">:</span> 192.168.0.4<span class="token punctuation">,</span> <span class="token key atrule">user</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> Testing123<span class="token punctuation">}</span>
  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> node1<span class="token punctuation">,</span> <span class="token key atrule">address</span><span class="token punctuation">:</span> 192.168.0.5<span class="token punctuation">,</span> <span class="token key atrule">internalAddress</span><span class="token punctuation">:</span> 192.168.0.5<span class="token punctuation">,</span> <span class="token key atrule">user</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> Testing123<span class="token punctuation">}</span>
  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> node2<span class="token punctuation">,</span> <span class="token key atrule">address</span><span class="token punctuation">:</span> 192.168.0.6<span class="token punctuation">,</span> <span class="token key atrule">internalAddress</span><span class="token punctuation">:</span> 192.168.0.6<span class="token punctuation">,</span> <span class="token key atrule">user</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> Testing123<span class="token punctuation">}</span>
  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> node3<span class="token punctuation">,</span> <span class="token key atrule">address</span><span class="token punctuation">:</span> 192.168.0.7<span class="token punctuation">,</span> <span class="token key atrule">internalAddress</span><span class="token punctuation">:</span> 192.168.0.7<span class="token punctuation">,</span> <span class="token key atrule">user</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> Testing123<span class="token punctuation">}</span>
  <span class="token key atrule">roleGroups</span><span class="token punctuation">:</span>
    <span class="token key atrule">etcd</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> master1
    <span class="token punctuation">-</span> master2
    <span class="token punctuation">-</span> master3
    <span class="token key atrule">control-plane</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> master1
    <span class="token punctuation">-</span> master2
    <span class="token punctuation">-</span> master3
    <span class="token key atrule">worker</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> node1
    <span class="token punctuation">-</span> node2
    <span class="token punctuation">-</span> node3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),L={href:"https://kubesphere.io/zh/docs/v3.3/installing-on-linux/introduction/vars/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://kubesphere.io/zh/docs/v3.3/installing-on-linux/introduction/multioverview/#2-%e7%bc%96%e8%be%91%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6",target:"_blank",rel:"noopener noreferrer"},O=t(`<h3 id="开启内置高可用模式" tabindex="-1"><a class="header-anchor" href="#开启内置高可用模式"><span>开启内置高可用模式</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">controlPlaneEndpoint</span><span class="token punctuation">:</span>
    <span class="token comment">##Internal loadbalancer for apiservers</span>
    <span class="token comment">#internalLoadbalancer: haproxy</span>
    
    <span class="token key atrule">domain</span><span class="token punctuation">:</span> lb.kubesphere.local
    <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6443</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>开启内置高可用模式，需要将 <code>internalLoadbalancer</code> 字段取消注释。</li><li><code>config-sample.yaml</code> 文件中的 <code>address</code> 和 <code>port</code> 应缩进两个空格。</li><li>负载均衡器默认的内部访问域名是 <code>lb.kubesphere.local</code>。</li></ul></div><h3 id="持久化存储插件配置" tabindex="-1"><a class="header-anchor" href="#持久化存储插件配置"><span>持久化存储插件配置</span></a></h3>`,4),Z=n("code",null,"config-sample.yaml",-1),q={href:"https://kubesphere.io/zh/docs/v3.3/installing-on-linux/persistent-storage-configurations/understand-persistent-storage/",target:"_blank",rel:"noopener noreferrer"},B=n("h3",{id:"启用可插拔组件-可选",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#启用可插拔组件-可选"},[n("span",null,"启用可插拔组件（可选）")])],-1),R=n("p",null,"自 v2.1.0 起，KubeSphere 解耦了一些核心功能组件。您可以在安装之前或者之后启用这些可插拔组件。如果您不启用这些组件，KubeSphere 将默认以最小化安装。",-1),j={href:"https://kubesphere.io/zh/docs/v3.3/pluggable-components/",target:"_blank",rel:"noopener noreferrer"},D=t(`<h3 id="开始安装" tabindex="-1"><a class="header-anchor" href="#开始安装"><span>开始安装</span></a></h3><p>配置完成后，您可以执行以下命令来开始安装：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./kk create cluster <span class="token parameter variable">-f</span> config-sample.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证安装" tabindex="-1"><a class="header-anchor" href="#验证安装"><span>验证安装</span></a></h3><ol><li><p>运行以下命令查看安装日志。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kubectl logs <span class="token parameter variable">-n</span> kubesphere-system <span class="token variable"><span class="token variable">$(</span>kubectl get pod <span class="token parameter variable">-n</span> kubesphere-system <span class="token parameter variable">-l</span> <span class="token string">&#39;app in (ks-install, ks-installer)&#39;</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{.items[0].metadata.name}&#39;</span><span class="token variable">)</span></span> <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>若您看到以下信息，您的高可用集群便已创建成功。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#####################################################</span>
<span class="token comment">###              Welcome to KubeSphere!           ###</span>
<span class="token comment">#####################################################</span>

Console: http://192.168.0.3:30880
Account: admin
Password: P@88w0rd

NOTES：
  <span class="token number">1</span>. After you log into the console, please check the
     monitoring status of <span class="token function">service</span> components <span class="token keyword">in</span>
     the <span class="token string">&quot;Cluster Management&quot;</span><span class="token builtin class-name">.</span> If any <span class="token function">service</span> is not
     ready, please <span class="token function">wait</span> patiently <span class="token keyword">until</span> all components
     are up and running.
  <span class="token number">2</span>. Please change the default password after login.

<span class="token comment">#####################################################</span>
https://kubesphere.io             <span class="token number">2020</span>-xx-xx xx:xx:xx
<span class="token comment">#####################################################</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,5);function M(J,U){const a=o("ExternalLinkIcon"),c=o("Tabs");return r(),d("div",null,[n("p",null,[n("a",h,[e("KubeKey"),s(a)]),e(" 作为一种集群安装工具，从版本 v1.2.1 开始，提供了内置高可用模式，支持一键部署高可用集群环境。KubeKey 的高可用模式实现方式称作本地负载均衡模式。具体表现为 KubeKey 会在每一个工作节点上部署一个负载均衡器（HAproxy），所有主节点的 Kubernetes 组件连接其本地的 kube-apiserver ，而所有工作节点的 Kubernetes 组件通过由 KubeKey 部署的负载均衡器反向代理到多个主节点的 kube-apiserver 。这种模式相较于专用到负载均衡器来说效率有所降低，因为会引入额外的健康检查机制，但是如果当前环境无法提供外部负载均衡器或者虚拟 IP（VIP）时这将是一种更实用、更有效、更方便的高可用部署模式。")]),v,m,n("p",null,[e("下图举例展示了内置高可用模式的架构图。有关系统和网络要求的更多信息，请参见"),n("a",g,[e("多节点安装"),s(a)]),e("。")]),y,s(c,{id:"30",data:[{id:"如果您能正常访问 GitHub 和 Googleapis"},{id:"如果您访问 GitHub 和 Googleapis 受限"}],active:0},{title0:l(({value:i,isActive:p})=>[e("如果您能正常访问 GitHub 和 Googleapis")]),title1:l(({value:i,isActive:p})=>[e("如果您访问 GitHub 和 Googleapis 受限")]),tab0:l(({value:i,isActive:p})=>[n("p",null,[e("从 "),n("a",_,[e("GitHub Release Page"),s(a)]),e(" 下载 KubeKey 或直接使用以下命令。")]),f,K]),tab1:l(({value:i,isActive:p})=>[x,A,w,S,T,H]),_:1}),I,n("div",N,[P,n("ul",null,[n("li",null,[n("p",null,[e("安装 KubeSphere 3.4 的建议 Kubernetes 版本：v1.20.x、v1.21.x、v1.22.x、v1.23.x、* v1.24.x、* v1.25.x 和 * v1.26.x。带星号的版本可能出现边缘节点部分功能不可用的情况。因此，如需使用边缘节点，推荐安装 v1.23.x。如果不指定 Kubernetes 版本，KubeKey 将默认安装 Kubernetes v1.23.10。有关受支持的 Kubernetes 版本的更多信息，请参见"),n("a",C,[e("支持矩阵"),s(a)]),e("。")])]),G,z])]),E,n("p",null,[e("有关该配置文件中不同字段的更多信息，请参见 "),n("a",L,[e("Kubernetes 集群配置"),s(a)]),e("和"),n("a",V,[e("多节点安装"),s(a)]),e("。")]),O,n("p",null,[e("在生产环境中，您需要准备持久化存储并在 "),Z,e(" 中配置存储插件（例如 CSI），以明确您想使用哪一种存储服务。有关更多信息，请参见"),n("a",q,[e("持久化存储配置"),s(a)]),e("。")]),B,R,n("p",null,[e("您可以根据您的需求来启用任意可插拔组件。强烈建议您安装这些可插拔组件，以便体验 KubeSphere 提供的全栈特性和功能。启用前，请确保您的机器有足够的 CPU 和内存。有关详情请参见"),n("a",j,[e("启用可插拔组件"),s(a)]),e("。")]),D])}const $=u(b,[["render",M],["__file","internal-ha-configuration.html.vue"]]),F=JSON.parse('{"path":"/guide/cloudnative/kubesphere/install-on-linux/high-availability-configurations/internal-ha-configuration.html","title":"使用 KubeKey 内置 HAproxy 创建高可用集群","lang":"zh-CN","frontmatter":{"title":"使用 KubeKey 内置 HAproxy 创建高可用集群","description":"KubeKey 作为一种集群安装工具，从版本 v1.2.1 开始，提供了内置高可用模式，支持一键部署高可用集群环境。KubeKey 的高可用模式实现方式称作本地负载均衡模式。具体表现为 KubeKey 会在每一个工作节点上部署一个负载均衡器（HAproxy），所有主节点的 Kubernetes 组件连接其本地的 kube-apiserver ，而所有工...","head":[["meta",{"property":"og:url","content":"https://github.com/abelit/abelit-datapeacock.git/guide/cloudnative/kubesphere/install-on-linux/high-availability-configurations/internal-ha-configuration.html"}],["meta",{"property":"og:site_name","content":"数之雀"}],["meta",{"property":"og:title","content":"使用 KubeKey 内置 HAproxy 创建高可用集群"}],["meta",{"property":"og:description","content":"KubeKey 作为一种集群安装工具，从版本 v1.2.1 开始，提供了内置高可用模式，支持一键部署高可用集群环境。KubeKey 的高可用模式实现方式称作本地负载均衡模式。具体表现为 KubeKey 会在每一个工作节点上部署一个负载均衡器（HAproxy），所有主节点的 Kubernetes 组件连接其本地的 kube-apiserver ，而所有工..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T14:06:18.000Z"}],["meta",{"property":"article:author","content":"Abelit"}],["meta",{"property":"article:modified_time","content":"2024-05-11T14:06:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 KubeKey 内置 HAproxy 创建高可用集群\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-11T14:06:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Abelit\\",\\"url\\":\\"https://github.com/abelit\\"}]}"]]},"headers":[{"level":2,"title":"架构","slug":"架构","link":"#架构","children":[]},{"level":2,"title":"安装依赖","slug":"安装依赖","link":"#安装依赖","children":[]},{"level":2,"title":"下载 KubeKey","slug":"下载-kubekey","link":"#下载-kubekey","children":[]},{"level":2,"title":"部署 KubeSphere 和 Kubernetes","slug":"部署-kubesphere-和-kubernetes","link":"#部署-kubesphere-和-kubernetes","children":[{"level":3,"title":"config-sample.yaml 示例","slug":"config-sample-yaml-示例","link":"#config-sample-yaml-示例","children":[]},{"level":3,"title":"开启内置高可用模式","slug":"开启内置高可用模式","link":"#开启内置高可用模式","children":[]},{"level":3,"title":"持久化存储插件配置","slug":"持久化存储插件配置","link":"#持久化存储插件配置","children":[]},{"level":3,"title":"启用可插拔组件（可选）","slug":"启用可插拔组件-可选","link":"#启用可插拔组件-可选","children":[]},{"level":3,"title":"开始安装","slug":"开始安装","link":"#开始安装","children":[]},{"level":3,"title":"验证安装","slug":"验证安装","link":"#验证安装","children":[]}]}],"git":{"createdTime":1715436378000,"updatedTime":1715436378000,"contributors":[{"name":"ableit","email":"ychenid@live.com","commits":1}]},"readingTime":{"minutes":4.9,"words":1469},"filePathRelative":"guide/cloudnative/kubesphere/install-on-linux/high-availability-configurations/internal-ha-configuration.md","localizedDate":"2024年5月11日","autoDesc":true,"excerpt":"<p><a href=\\"https://github.com/kubesphere/kubekey\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">KubeKey</a> 作为一种集群安装工具，从版本 v1.2.1 开始，提供了内置高可用模式，支持一键部署高可用集群环境。KubeKey 的高可用模式实现方式称作本地负载均衡模式。具体表现为 KubeKey 会在每一个工作节点上部署一个负载均衡器（HAproxy），所有主节点的 Kubernetes 组件连接其本地的 kube-apiserver ，而所有工作节点的 Kubernetes 组件通过由 KubeKey 部署的负载均衡器反向代理到多个主节点的 kube-apiserver 。这种模式相较于专用到负载均衡器来说效率有所降低，因为会引入额外的健康检查机制，但是如果当前环境无法提供外部负载均衡器或者虚拟 IP（VIP）时这将是一种更实用、更有效、更方便的高可用部署模式。</p>"}');export{$ as comp,F as data};
