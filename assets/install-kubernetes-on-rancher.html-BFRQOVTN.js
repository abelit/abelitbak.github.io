import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as t,f as a}from"./app-DR5J2daJ.js";const s="/assets/rancher-global-settings-01-B_uwjHq3.png",r="/assets/rancher-global-settings-system-default-registry-01-D2y4SrSj.png",i="/assets/rancher-create-kubernetes-01-C_NZuLqy.png",c="/assets/rancher-create-kubernetes-02-B7N2j1uS.png",l="/assets/rancher-create-kubernetes-03-4Yx9k0fm.png",d="/assets/rancher-create-kubernetes-04-DRjk82Ga.png",o="/assets/rancher-create-kubernetes-05-D9nZpt8k.png",p="/assets/rancher-create-kubernetes-06-CQgyg35C.png",u={},h=a(`<h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h2><table><thead><tr><th>主机名称</th><th>IP 地址</th><th>用途</th><th>组件</th><th>版本</th></tr></thead><tbody><tr><td>k8s-node01</td><td>10.10.12.210</td><td>master 节点</td><td>kube-apiserver,kube-scheduler,etcd,kube-controller-manager,kubectl,kubelet,kubeadm</td><td>v1.26.8</td></tr><tr><td>k8s-node02</td><td>10.10.12.211</td><td>master 节点</td><td>kube-apiserver,kube-scheduler,etcd,kube-controller-manager,kubectl,kubelet,kubeadm</td><td>v1.26.8</td></tr><tr><td>k8s-node03</td><td>10.10.12.212</td><td>master 节点</td><td>kube-apiserver,kube-scheduler,etcd,kube-controller-manager,kubectl,kubelet,kubeadm</td><td>v1.26.8</td></tr><tr><td>k8s-node04</td><td>10.10.12.213</td><td>worker 节点</td><td>kube-proxy,kubelet,kubeadm</td><td>v1.26.8</td></tr><tr><td>k8s-node05</td><td>10.10.12.214</td><td>worker 节点</td><td>kube-proxy,kubelet,kubeadm</td><td>v1.26.8</td></tr><tr><td>k8s-manager</td><td>10.10.12.100</td><td>rancher/k8s 管理节点</td><td>docker,rancher</td><td></td></tr></tbody></table><h2 id="启动-rancher" tabindex="-1"><a class="header-anchor" href="#启动-rancher"><span>启动 Rancher</span></a></h2><h3 id="docker-命令行" tabindex="-1"><a class="header-anchor" href="#docker-命令行"><span>docker 命令行</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span><span class="token punctuation">-</span>restart=unless<span class="token punctuation">-</span>stopped \\
<span class="token punctuation">-</span>p 80<span class="token punctuation">:</span>80 <span class="token punctuation">-</span>p 443<span class="token punctuation">:</span>443 \\
<span class="token punctuation">-</span><span class="token punctuation">-</span>privileged \\
rancher/rancher<span class="token punctuation">:</span>latest \\
<span class="token punctuation">-</span>v ./data<span class="token punctuation">:</span>/var/lib/rancher
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose"><span>docker-compose</span></a></h3><ul><li><code>docker-compose.yaml</code></li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>version: <span class="token string">&#39;3&#39;</span>
services:
  rancher:
    image: rancher/rancher:latest
    privileged: <span class="token boolean">true</span>
    restart: unless-stopped
    ports:
      - <span class="token number">80</span>:80
      - <span class="token number">443</span>:443
    volumes:
      - ./data:/var/lib/rancher
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="配置-rancher" tabindex="-1"><a class="header-anchor" href="#配置-rancher"><span>配置 Rancher</span></a></h2><h3 id="设置-rancher-默认镜像仓库" tabindex="-1"><a class="header-anchor" href="#设置-rancher-默认镜像仓库"><span>设置 Rancher 默认镜像仓库</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>把系统设置里面的 system-default-registry value 设置为 registry.cn-hangzhou.aliyuncs.com；</p></div><p><img src="`+s+'" alt="设置rancher默认镜像仓库 step1" loading="lazy"><img src="'+r+'" alt="设置rancher默认镜像仓库 step2" loading="lazy"></p><h3 id="设置应用商店地址" tabindex="-1"><a class="header-anchor" href="#设置应用商店地址"><span>设置应用商店地址</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Rancher 默认使用 Github 上的 repo 作为应用商店的 URL，如果出现 timeout 情况，可以将 Catalog URL 替换成码云的地址。</p></div><ul><li>应用商店地址列表</li></ul><table><thead><tr><th>应用商店地址</th><th>RANCHER REPO 地址</th><th>GITEE 地址</th></tr></thead><tbody><tr><td>https://git.rancher.io/helm3-charts</td><td>https://github.com/rancher/helm3-charts</td><td>https://gitee.com/rancher/helm3-charts</td></tr><tr><td>https://git.rancher.io/charts</td><td>https://github.com/rancher/charts</td><td>https://gitee.com/rancher/charts</td></tr><tr><td>https://git.rancher.io/system-charts</td><td>https://github.com/rancher/system-charts</td><td>https://gitee.com/rancher/system-charts</td></tr></tbody></table><h2 id="创建k8s集群" tabindex="-1"><a class="header-anchor" href="#创建k8s集群"><span>创建k8s集群</span></a></h2><ul><li><p>在首页或者集群管理界面创建集群 <img src="'+i+'" alt="安装k8s集群 step1" loading="lazy"></p></li><li><p>选择自定义 <img src="'+c+'" alt="安装k8s集群 step2" loading="lazy"><img src="'+l+'" alt="安装k8s集群 step3" loading="lazy"></p></li><li><p>master节点配置</p></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>节点角色选择ETCD、Control Panel, 然后在所有master节点上执行&quot;Step 2&quot;中的”注册命令“。</p></div><figure><img src="'+d+'" alt="安装k8s集群 step4" tabindex="0" loading="lazy"><figcaption>安装k8s集群 step4</figcaption></figure><ul><li>worker节点配置</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>节点角色选择worker, 然后在所有worker节点上执行&quot;Step 2&quot;中的”注册命令“。</p></div><figure><img src="'+o+'" alt="安装k8s集群 step5" tabindex="0" loading="lazy"><figcaption>安装k8s集群 step5</figcaption></figure><ul><li>点击“完成”，等待集群创建。 集群安装完成后的效果。 <img src="'+p+`" alt="安装k8s集群 step6" loading="lazy"></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果重复安装，需要清除所有记录。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>
<span class="token function">docker</span> system prune <span class="token parameter variable">-f</span>
<span class="token function">docker</span> volume <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> volume <span class="token function">ls</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span>
<span class="token function">docker</span> image <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/ceph <span class="token punctuation">\\</span>
       /etc/cni <span class="token punctuation">\\</span>
       /etc/kubernetes <span class="token punctuation">\\</span>
       /opt/cni <span class="token punctuation">\\</span>
       /opt/rke <span class="token punctuation">\\</span>
       /run/secrets/kubernetes.io <span class="token punctuation">\\</span>
       /run/calico <span class="token punctuation">\\</span>
       /run/flannel <span class="token punctuation">\\</span>
       /var/lib/calico <span class="token punctuation">\\</span>
       /var/lib/etcd <span class="token punctuation">\\</span>
       /var/lib/cni <span class="token punctuation">\\</span>
       /var/lib/kubelet <span class="token punctuation">\\</span>
       /var/lib/rancher/rke/log <span class="token punctuation">\\</span>
       /var/log/containers <span class="token punctuation">\\</span>
       /var/log/pods <span class="token punctuation">\\</span>
       /var/run/calico
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,27),k=[h];function m(b,v){return n(),t("div",null,k)}const f=e(u,[["render",m],["__file","install-kubernetes-on-rancher.html.vue"]]),_=JSON.parse('{"path":"/guide/cloudnative/rancher/installation/install-kubernetes-on-rancher.html","title":"使用Rancher部署k8s集群","lang":"zh-CN","frontmatter":{"title":"使用Rancher部署k8s集群","description":"环境准备 启动 Rancher docker 命令行 docker-compose docker-compose.yaml 运行 配置 Rancher 设置 Rancher 默认镜像仓库 提示 把系统设置里面的 system-default-registry value 设置为 registry.cn-hangzhou.aliyuncs.com； 设置...","head":[["meta",{"property":"og:url","content":"https://github.com/abelit/abelit-datapeacock.git/guide/cloudnative/rancher/installation/install-kubernetes-on-rancher.html"}],["meta",{"property":"og:site_name","content":"数之雀"}],["meta",{"property":"og:title","content":"使用Rancher部署k8s集群"}],["meta",{"property":"og:description","content":"环境准备 启动 Rancher docker 命令行 docker-compose docker-compose.yaml 运行 配置 Rancher 设置 Rancher 默认镜像仓库 提示 把系统设置里面的 system-default-registry value 设置为 registry.cn-hangzhou.aliyuncs.com； 设置..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T14:06:18.000Z"}],["meta",{"property":"article:author","content":"Abelit"}],["meta",{"property":"article:modified_time","content":"2024-05-11T14:06:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Rancher部署k8s集群\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-11T14:06:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Abelit\\",\\"url\\":\\"https://github.com/abelit\\"}]}"]]},"headers":[{"level":2,"title":"环境准备","slug":"环境准备","link":"#环境准备","children":[]},{"level":2,"title":"启动 Rancher","slug":"启动-rancher","link":"#启动-rancher","children":[{"level":3,"title":"docker 命令行","slug":"docker-命令行","link":"#docker-命令行","children":[]},{"level":3,"title":"docker-compose","slug":"docker-compose","link":"#docker-compose","children":[]}]},{"level":2,"title":"配置 Rancher","slug":"配置-rancher","link":"#配置-rancher","children":[{"level":3,"title":"设置 Rancher 默认镜像仓库","slug":"设置-rancher-默认镜像仓库","link":"#设置-rancher-默认镜像仓库","children":[]},{"level":3,"title":"设置应用商店地址","slug":"设置应用商店地址","link":"#设置应用商店地址","children":[]}]},{"level":2,"title":"创建k8s集群","slug":"创建k8s集群","link":"#创建k8s集群","children":[]}],"git":{"createdTime":1715436378000,"updatedTime":1715436378000,"contributors":[{"name":"ableit","email":"ychenid@live.com","commits":1}]},"readingTime":{"minutes":1.83,"words":550},"filePathRelative":"guide/cloudnative/rancher/installation/install-kubernetes-on-rancher.md","localizedDate":"2024年5月11日","autoDesc":true,"excerpt":"<h2>环境准备</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>主机名称</th>\\n<th>IP 地址</th>\\n<th>用途</th>\\n<th>组件</th>\\n<th>版本</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>k8s-node01</td>\\n<td>10.10.12.210</td>\\n<td>master 节点</td>\\n<td>kube-apiserver,kube-scheduler,etcd,kube-controller-manager,kubectl,kubelet,kubeadm</td>\\n<td>v1.26.8</td>\\n</tr>\\n<tr>\\n<td>k8s-node02</td>\\n<td>10.10.12.211</td>\\n<td>master 节点</td>\\n<td>kube-apiserver,kube-scheduler,etcd,kube-controller-manager,kubectl,kubelet,kubeadm</td>\\n<td>v1.26.8</td>\\n</tr>\\n<tr>\\n<td>k8s-node03</td>\\n<td>10.10.12.212</td>\\n<td>master 节点</td>\\n<td>kube-apiserver,kube-scheduler,etcd,kube-controller-manager,kubectl,kubelet,kubeadm</td>\\n<td>v1.26.8</td>\\n</tr>\\n<tr>\\n<td>k8s-node04</td>\\n<td>10.10.12.213</td>\\n<td>worker 节点</td>\\n<td>kube-proxy,kubelet,kubeadm</td>\\n<td>v1.26.8</td>\\n</tr>\\n<tr>\\n<td>k8s-node05</td>\\n<td>10.10.12.214</td>\\n<td>worker 节点</td>\\n<td>kube-proxy,kubelet,kubeadm</td>\\n<td>v1.26.8</td>\\n</tr>\\n<tr>\\n<td>k8s-manager</td>\\n<td>10.10.12.100</td>\\n<td>rancher/k8s 管理节点</td>\\n<td>docker,rancher</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>"}');export{f as comp,_ as data};
