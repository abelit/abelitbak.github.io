import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as t,c as r,a,d as s,b as o,w as d,f as e}from"./app-DR5J2daJ.js";const c={},p=e(`<h2 id="kubernetes-节点规划" tabindex="-1"><a class="header-anchor" href="#kubernetes-节点规划"><span>Kubernetes 节点规划</span></a></h2><table><thead><tr><th>主机名称</th><th>IP 地址</th><th>用途</th><th>组件</th><th>版本</th></tr></thead><tbody><tr><td>k8s-master01</td><td>10.10.12.210,10.10.12.235(vip)</td><td>master 节点</td><td>kube-apiserver,kube-scheduler,etcd,kube-controller-manager,kubectl,kubelet,kubeadm,keepalive,haproxy</td><td>v1.28.2</td></tr><tr><td>k8s-master02</td><td>10.10.12.211,10.10.12.235(vip)</td><td>master 节点</td><td>kube-apiserver,kube-scheduler,etcd,kube-controller-manager,kubectl,kubelet,kubeadm,keepalive,haproxy</td><td>v1.28.2</td></tr><tr><td>k8s-master03</td><td>10.10.12.212,10.10.12.235(vip)</td><td>master 节点</td><td>kube-apiserver,kube-scheduler,etcd,kube-controller-manager,kubectl,kubelet,kubeadm,keepalive,haproxy</td><td>v1.28.2</td></tr><tr><td>k8s-worker01</td><td>10.10.12.213</td><td>worker 节点</td><td>kube-proxy,kubelet,kubeadm</td><td>v1.28.2</td></tr><tr><td>k8s-worker02</td><td>10.10.12.214</td><td>worker 节点</td><td>kube-proxy,kubelet,kubeadm</td><td>v1.28.2</td></tr></tbody></table><h2 id="在线部署k8s集群" tabindex="-1"><a class="header-anchor" href="#在线部署k8s集群"><span>在线部署k8s集群</span></a></h2><h3 id="创建python虚拟环境" tabindex="-1"><a class="header-anchor" href="#创建python虚拟环境"><span>创建Python虚拟环境</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python3 <span class="token parameter variable">-m</span> venv venv
<span class="token builtin class-name">source</span> venv/bin/activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装与配置kubespray" tabindex="-1"><a class="header-anchor" href="#安装与配置kubespray"><span>安装与配置Kubespray</span></a></h3><ul><li>下载Kubespray源码</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/kubernetes-sigs/kubespray.git
<span class="token builtin class-name">cd</span> kubespray
<span class="token comment"># git checkout release-2.17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装依赖</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt <span class="token parameter variable">-i</span> http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>配置集群主机信息</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token parameter variable">-rfp</span> inventory/sample inventory/mycluster
<span class="token builtin class-name">declare</span> <span class="token parameter variable">-a</span> <span class="token assign-left variable">IPS</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10.10</span>.12.210 <span class="token number">10.10</span>.12.211 <span class="token number">10.10</span>.12.212 <span class="token number">10.10</span>.12.213 <span class="token number">10.10</span>.12.214<span class="token punctuation">)</span>
<span class="token assign-left variable">CONFIG_FILE</span><span class="token operator">=</span>inventory/mycluster/hosts.yaml python3 contrib/inventory_builder/inventory.py <span class="token variable">\${IPS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>编辑<code>inventory/mycluster/hosts.yaml</code>，根据集群信息配置控制面板和工作节点</p></div><ul><li>查看集群主机信息</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> inventory/mycluster/hosts.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>国内镜像加速</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Use the download mirror</span>
<span class="token function">cp</span> inventory/mycluster/group_vars/all/offline.yml inventory/mycluster/group_vars/all/mirror.yml
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;/# .*\\{\\{ files_repo/s/^# //g&#39;</span> inventory/mycluster/group_vars/all/mirror.yml

<span class="token function">tee</span> <span class="token parameter variable">-a</span> inventory/mycluster/group_vars/all/mirror.yml <span class="token operator">&lt;&lt;</span><span class="token string">EOF
gcr_image_repo: &quot;gcr.m.daocloud.io&quot;
kube_image_repo: &quot;k8s.m.daocloud.io&quot;
docker_image_repo: &quot;docker.m.daocloud.io&quot;
quay_image_repo: &quot;quay.m.daocloud.io&quot;
github_image_repo: &quot;ghcr.m.daocloud.io&quot;
files_repo: &quot;https://files.m.daocloud.io&quot;
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置etcd部署方式</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/etcd_deployment_type: host/etcd_deployment_type: docker/g&#39;</span> inventory/mycluster/group_vars/all/etcd.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>etcd_deployment_type: host 把etcd部署在宿主机</li><li>etcd_deployment_type: docker 把etcd部署在容器中</li></ul></div><h3 id="安装k8s集群" tabindex="-1"><a class="header-anchor" href="#安装k8s集群"><span>安装k8s集群</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ansible-playbook <span class="token parameter variable">-u</span> root <span class="token parameter variable">-k</span> <span class="token parameter variable">-i</span> inventory/mycluster/hosts.yaml  <span class="token parameter variable">--become</span> --become-user<span class="token operator">=</span>root cluster.yml 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="离线部署k8s集群" tabindex="-1"><a class="header-anchor" href="#离线部署k8s集群"><span>离线部署k8s集群</span></a></h2><h3 id="准备离线文件" tabindex="-1"><a class="header-anchor" href="#准备离线文件"><span>准备离线文件</span></a></h3><ul><li>下载Kubespray包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/kubernetes-sigs/kubespray.git
<span class="token builtin class-name">cd</span> kubespray
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>下载需要的安装包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 生成下载包和镜像列表</span>
<span class="token builtin class-name">cd</span> contrib/offline
<span class="token function">sh</span> generate_list.sh

<span class="token comment"># 下载软件包到目录 temp/files</span>
<span class="token function">wget</span> <span class="token parameter variable">-x</span> <span class="token parameter variable">-P</span> temp/files <span class="token parameter variable">-i</span> temp/files.list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>文件下载完成后，把文件上传到nginx代理服务器的<code>/var/www/k8s/files/</code>目录</p></div><ul><li>安装和配置nginx代理</li></ul><blockquote><p>在镜像服务器上</p></blockquote><ul><li>安装nginx</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>配置nginx</li></ul><div class="language-conf line-numbers-mode" data-ext="conf" data-title="conf"><pre class="language-conf"><code>server {
    listen 5001;
    server_name files.datapeacock.com;
    location /k8s/ {
            alias /var/www/k8s/files/;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重启nginx</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl restart nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>测试，注意版本，如果能正常下载则代表代理搭建正常</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">wget</span> http://files.datapeacock.com:5001/k8s/dl.k8s.io/release/v1.28.2/bin/linux/amd64/kubelet 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="准备离线镜像" tabindex="-1"><a class="header-anchor" href="#准备离线镜像"><span>准备离线镜像</span></a></h3>`,40),u=a("li",null,"下载依赖镜像",-1),v=e(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装并启动docker-ce </span>
yum <span class="token function">install</span> docker-ce
<span class="token function">service</span> <span class="token function">docker</span> start

<span class="token comment"># 安装 skopeo 将依赖镜像同步到自建私有镜像仓库</span>
<span class="token comment"># 注意centos操作系统版本要在7.x</span>
yum <span class="token function">install</span> skopeo  

<span class="token comment"># 创建docker公共的项目k8s，harbor域名：harbor.datapeacock.com:5000</span>
<span class="token comment"># 如果需要登录则执行</span>
<span class="token function">docker</span> login harbor.datapeacock.com:5000

<span class="token comment"># 同步镜像</span>
<span class="token comment"># for image in $(cat temp/images.list); do skopeo copy docker://\${image} docker://harbor.datapeacock.com:5000/k8s/\${image#*/}; done</span>
<span class="token comment"># for image in $(cat temp/images.list); do skopeo copy docker://\${image} docker://harbor.datapeacock.com:5000/k8s/\${image#*/} --dest-tls-verify=false; done</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">image</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> temp/images.list<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token assign-left variable">repo_src</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $image <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">&#39;/&#39;</span> <span class="token string">&#39;{print $1}&#39;</span><span class="token variable">)</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$repo_src</span>&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;gcr.io&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">repo_dst</span><span class="token operator">=</span><span class="token string">&quot;gcr.m.daocloud.io&quot;</span>
    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$repo_src</span>&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;registry.k8s.io&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">repo_dst</span><span class="token operator">=</span><span class="token string">&quot;k8s.m.daocloud.io&quot;</span>
    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$repo_src</span>&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;docker.io&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">repo_dst</span><span class="token operator">=</span><span class="token string">&quot;docker.m.daocloud.io&quot;</span>
    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$repo_src</span>&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;quay.io&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">repo_dst</span><span class="token operator">=</span><span class="token string">&quot;quay.m.daocloud.io&quot;</span>
    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$repo_src</span>&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;ghcr.io&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">repo_dst</span><span class="token operator">=</span><span class="token string">&quot;ghcr.m.daocloud.io&quot;</span>
    <span class="token keyword">else</span>
        <span class="token assign-left variable">repo_dst</span><span class="token operator">=</span><span class="token string">&quot;docker.m.daocloud.io&quot;</span>
    <span class="token keyword">fi</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$repo_dst</span>/<span class="token variable">\${image<span class="token operator">#</span>*<span class="token operator">/</span>}</span>
    skopeo copy docker://<span class="token variable">$repo_dst</span>/<span class="token variable">\${image<span class="token operator">#</span>*<span class="token operator">/</span>}</span> docker://harbor.datapeacock.com:5000/k8s/<span class="token variable">\${image<span class="token operator">#</span>*<span class="token operator">/</span>}</span> --dest-tls-verify<span class="token operator">=</span>false
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>下载kubespray镜像，省去安装kubespray各种依赖</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 下载镜像</span>
<span class="token function">docker</span> pull quay.io/kubespray/kubespray:v2.23.0 

<span class="token comment"># 镜像打tag</span>
<span class="token function">docker</span> tag quay.io/kubespray/kubespray:v2.23.0 harbor.datapeacock.com:5000/k8s/quay.io/kubespray/kubespray:v2.23.0 

<span class="token comment"># 推送到自己的harbor仓库</span>
<span class="token function">docker</span> push harbor.datapeacock.com:5000/k8s/quay.io/kubespray/kubespray:v2.23.0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试镜像仓库</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull harbor.datapeacock.com:5000/k8s/quay.io/kubespray/kubespray:v2.23.0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="安装k8s集群-普通方式" tabindex="-1"><a class="header-anchor" href="#安装k8s集群-普通方式"><span>安装k8s集群（普通方式）</span></a></h3><h4 id="创建python虚拟环境-1" tabindex="-1"><a class="header-anchor" href="#创建python虚拟环境-1"><span>创建Python虚拟环境</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python3 <span class="token parameter variable">-m</span> venv venv
<span class="token builtin class-name">source</span> venv/bin/activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="安装与配置kubespray-1" tabindex="-1"><a class="header-anchor" href="#安装与配置kubespray-1"><span>安装与配置Kubespray</span></a></h4><ul><li>下载Kubespray源码</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/kubernetes-sigs/kubespray.git
<span class="token builtin class-name">cd</span> kubespray
<span class="token comment"># git checkout release-2.17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装依赖</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt <span class="token parameter variable">-i</span> http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>配置集群主机信息</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token parameter variable">-rfp</span> inventory/sample inventory/mycluster
<span class="token builtin class-name">declare</span> <span class="token parameter variable">-a</span> <span class="token assign-left variable">IPS</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10.10</span>.12.210 <span class="token number">10.10</span>.12.211 <span class="token number">10.10</span>.12.212 <span class="token number">10.10</span>.12.213 <span class="token number">10.10</span>.12.214<span class="token punctuation">)</span>
<span class="token assign-left variable">CONFIG_FILE</span><span class="token operator">=</span>inventory/mycluster/hosts.yaml python3 contrib/inventory_builder/inventory.py <span class="token variable">\${IPS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>编辑<code>inventory/mycluster/hosts.yaml</code>，根据集群信息配置控制面板和工作节点</p></div><ul><li>查看集群主机信息</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> inventory/mycluster/hosts.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>离线镜像加速</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Use the download mirror</span>
<span class="token function">cp</span> inventory/mycluster/group_vars/all/offline.yml inventory/mycluster/group_vars/all/mirror.yml
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;/# .*\\{\\{ files_repo/s/^# //g&#39;</span> inventory/mycluster/group_vars/all/mirror.yml

<span class="token function">tee</span> <span class="token parameter variable">-a</span> inventory/mycluster/group_vars/all/mirror.yml <span class="token operator">&lt;&lt;</span><span class="token string">EOF
gcr_image_repo: &quot;harbor.datapeacock.com:5000/k8s&quot;
kube_image_repo: &quot;harbor.datapeacock.com:5000/k8s&quot;
docker_image_repo: &quot;harbor.datapeacock.com:5000/k8s&quot;
quay_image_repo: &quot;harbor.datapeacock.com:5000/k8s&quot;
github_image_repo: &quot;harbor.datapeacock.com:5000/k8s&quot;
files_repo: &quot;http://files.datapeacock.com:5001/k8s&quot;
containerd_registries_mirrors:
 - prefix: harbor.datapeacock.com
   mirrors:
    - host: https://harbor.datapeacock.com:5000
      capabilities: [&quot;pull&quot;, &quot;resolve&quot;]
      skip_verify: true
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置etcd部署方式</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/etcd_deployment_type: host/etcd_deployment_type: kubeadm/g&#39;</span> inventory/mycluster/group_vars/all/etcd.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>nerdctl下载镜像安全设置</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>insecure_registry = true&quot;</span> <span class="token operator">&gt;&gt;</span> roles/container-engine/nerdctl/templates/nerdctl.toml.j2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>etcd_deployment_type: host 把etcd部署在宿主机</li><li>etcd_deployment_type: docker 把etcd部署在容器中</li><li>etcd_deployment_type: kubeadm 把etcd部署在容器中(kubeadm安装方式)</li></ul></div><ul><li>安装k8s</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ansible-playbook <span class="token parameter variable">-u</span> root <span class="token parameter variable">-k</span> <span class="token parameter variable">-i</span> inventory/mycluster/hosts.yaml  <span class="token parameter variable">--become</span> --become-user<span class="token operator">=</span>root cluster.yml 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="安装k8s集群-docker方式" tabindex="-1"><a class="header-anchor" href="#安装k8s集群-docker方式"><span>安装k8s集群（docker方式）</span></a></h3><h4 id="安装与配置kubespray-2" tabindex="-1"><a class="header-anchor" href="#安装与配置kubespray-2"><span>安装与配置Kubespray</span></a></h4><ul><li>下载Kubespray源码</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/kubernetes-sigs/kubespray.git
<span class="token builtin class-name">cd</span> kubespray
<span class="token comment"># git checkout release-2.17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置集群主机信息</li></ul><p>复制文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token parameter variable">-rfp</span> inventory/sample inventory/mycluster
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编辑<code>inventory/mycluster/hosts.yaml</code>，文件内容:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>all:
  hosts:
    node1:
      ansible_host: <span class="token number">10.10</span>.12.210
      ip: <span class="token number">10.10</span>.12.210
      access_ip: <span class="token number">10.10</span>.12.210
    node2:
      ansible_host: <span class="token number">10.10</span>.12.211
      ip: <span class="token number">10.10</span>.12.211
      access_ip: <span class="token number">10.10</span>.12.211
    node3:
      ansible_host: <span class="token number">10.10</span>.12.212
      ip: <span class="token number">10.10</span>.12.212
      access_ip: <span class="token number">10.10</span>.12.212
    node4:
      ansible_host: <span class="token number">10.10</span>.12.213
      ip: <span class="token number">10.10</span>.12.213
      access_ip: <span class="token number">10.10</span>.12.213
    node5:
      ansible_host: <span class="token number">10.10</span>.12.214
      ip: <span class="token number">10.10</span>.12.214
      access_ip: <span class="token number">10.10</span>.12.214
  children:
    kube_control_plane:
      hosts:
        node1:
        node2:
        node3:
    kube_node:
      hosts:
        node1:
        node2:
        node3:
        node4:
        node5:
    etcd:
      hosts:
        node1:
        node2:
        node3:
    k8s_cluster:
      children:
        kube_control_plane:
        kube_node:
    calico_rr:
      hosts: <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>编辑<code>inventory/mycluster/hosts.yaml</code>，根据集群信息配置控制面板和工作节点</p></div><ul><li>查看集群主机信息</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> inventory/mycluster/hosts.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>离线镜像加速</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Use the download mirror</span>
<span class="token function">cp</span> inventory/mycluster/group_vars/all/offline.yml inventory/mycluster/group_vars/all/mirror.yml
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;/# .*\\{\\{ files_repo/s/^# //g&#39;</span> inventory/mycluster/group_vars/all/mirror.yml

<span class="token function">tee</span> <span class="token parameter variable">-a</span> inventory/mycluster/group_vars/all/mirror.yml <span class="token operator">&lt;&lt;</span><span class="token string">EOF
gcr_image_repo: &quot;harbor.datapeacock.com:5000/k8s&quot;
kube_image_repo: &quot;harbor.datapeacock.com:5000/k8s&quot;
docker_image_repo: &quot;harbor.datapeacock.com:5000/k8s&quot;
quay_image_repo: &quot;harbor.datapeacock.com:5000/k8s&quot;
github_image_repo: &quot;harbor.datapeacock.com:5000/k8s&quot;
files_repo: &quot;http://files.datapeacock.com:5001/k8s&quot;
containerd_registries_mirrors:
 - prefix: harbor.datapeacock.com
   mirrors:
    - host: https://harbor.datapeacock.com:5000
      capabilities: [&quot;pull&quot;, &quot;resolve&quot;]
      skip_verify: true
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置etcd部署方式</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/etcd_deployment_type: host/etcd_deployment_type: kubeadm/g&#39;</span> inventory/mycluster/group_vars/all/etcd.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>etcd_deployment_type: host 把etcd部署在宿主机</li><li>etcd_deployment_type: docker 把etcd部署在容器中</li><li>etcd_deployment_type: kubeadm 把etcd部署在容器中(kubeadm安装方式)</li></ul></div><ul><li>下载镜像</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull harbor.datapeacock.com:5000/k8s/quay.io/kubespray/kubespray:v2.23.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行docker安装k8s集群</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 运行kubespray容器</span>
<span class="token comment"># docker run --rm -it --mount type=bind,source=/home/abelit/Downloads/kubespray/inventory/mycluster,dst=/inventory \\</span>
<span class="token comment">#   --mount type=bind,source=/home/abelit/Downloads/kubespray,dst=/apps/kubespray \\</span>
<span class="token comment">#   --mount type=bind,source=&quot;\${HOME}&quot;/.ssh/id_rsa,dst=/root/.ssh/id_rsa \\</span>
<span class="token comment">#   harbor.datapeacock.com:5000/k8s/quay.io/kubespray/kubespray:v2.23.0 bash</span>

<span class="token comment"># # 在容器里执行命令安装集群</span>
<span class="token comment"># # ANSIBLE_HOST_KEY_CHECKING=False 作用是首次访问集群机器不用输入yes验证</span>
<span class="token comment"># # 注意集群节点都能访问harbor.datapeacock.com:5000和files.datapeacock.com:5001域名</span>
<span class="token comment"># ANSIBLE_HOST_KEY_CHECKING=False  ansible-playbook -i /inventory/inventory.ini --private-key /root/.ssh/id_rsa cluster.yml</span>

<span class="token comment"># 运行kubespray容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--mount</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,source<span class="token operator">=</span>/home/abelit/Downloads/kubespray/inventory/mycluster,dst<span class="token operator">=</span>/inventory <span class="token punctuation">\\</span>
  <span class="token parameter variable">--mount</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,source<span class="token operator">=</span>/home/abelit/Downloads/kubespray,dst<span class="token operator">=</span>/apps/kubespray <span class="token punctuation">\\</span>
  harbor.datapeacock.com:5000/k8s/quay.io/kubespray/kubespray:v2.23.0 <span class="token function">bash</span>

<span class="token comment"># 在容器里执行命令安装集群</span>
<span class="token comment"># ANSIBLE_HOST_KEY_CHECKING=False 作用是首次访问集群机器不用输入yes验证</span>
<span class="token comment"># 注意集群节点都能访问harbor.datapeacock.com:5000和files.datapeacock.com:5001域名</span>
<span class="token assign-left variable">ANSIBLE_HOST_KEY_CHECKING</span><span class="token operator">=</span>False  ansible-playbook <span class="token parameter variable">-u</span> root <span class="token parameter variable">-k</span> <span class="token parameter variable">-i</span> inventory/mycluster/hosts.yaml  <span class="token parameter variable">--become</span> --become-user<span class="token operator">=</span>root cluster.yml 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="管理集群信息" tabindex="-1"><a class="header-anchor" href="#管理集群信息"><span>管理集群信息</span></a></h2><h3 id="新增节点" tabindex="-1"><a class="header-anchor" href="#新增节点"><span>新增节点</span></a></h3><ul><li>更新节点信息 修改<code>inventory/mycluster/hosts.yaml</code></li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>kube_node<span class="token punctuation">]</span>
node1
node2 <span class="token comment">#新增节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行扩容命令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ansible-playbook <span class="token parameter variable">-u</span> root <span class="token parameter variable">-k</span> <span class="token parameter variable">-i</span> inventory/mycluster/hosts.yaml  <span class="token parameter variable">--become</span> --become-user<span class="token operator">=</span>root scale.yml <span class="token parameter variable">-b</span> <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除节点" tabindex="-1"><a class="header-anchor" href="#删除节点"><span>删除节点</span></a></h3><p>修改<code>inventory/mycluster/hosts.yaml</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>kube_node<span class="token punctuation">]</span>
node1
node2 <span class="token comment">#删除节点</span>
node3 <span class="token comment">#删除节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行删除</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ansible-playbook <span class="token parameter variable">-u</span> root <span class="token parameter variable">-k</span> <span class="token parameter variable">-i</span> inventory/mycluster/hosts.yaml  <span class="token parameter variable">--become</span> --become-user<span class="token operator">=</span>root remove-node.yml <span class="token parameter variable">-b</span> <span class="token parameter variable">-v</span> --extra-vars <span class="token string">&quot;node=node2,node3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="升级" tabindex="-1"><a class="header-anchor" href="#升级"><span>升级</span></a></h3><ul><li><p>下载文件和对应的镜像，具体操作见上文</p></li><li><p>执行升级</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ansible-playbook <span class="token parameter variable">-u</span> root <span class="token parameter variable">-k</span> <span class="token parameter variable">-i</span> inventory/mycluster/hosts.yaml  <span class="token parameter variable">--become</span> --become-user<span class="token operator">=</span>root upgrade-cluster.yml  <span class="token parameter variable">-e</span> kube<span class="token punctuation">\\</span>_version<span class="token operator">=</span>v1.26.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="卸载" tabindex="-1"><a class="header-anchor" href="#卸载"><span>卸载</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ansible-playbook <span class="token parameter variable">-u</span> root <span class="token parameter variable">-k</span> <span class="token parameter variable">-i</span> inventory/mycluster/hosts.yaml  <span class="token parameter variable">--become</span> --become-user<span class="token operator">=</span>root reset.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,64);function m(b,k){const n=i("RouteLink");return t(),r("div",null,[p,a("ul",null,[a("li",null,[s("搭建自己的镜像仓库，"),o(n,{to:"/guide/cloudnative/docker/registry.html"},{default:d(()=>[s("docker registry 参考地址")]),_:1}),s("。")]),u]),v])}const y=l(c,[["render",m],["__file","install-k8s-ha-with-kubespay.html.vue"]]),_=JSON.parse('{"path":"/guide/cloudnative/kubernetes/installation/install-k8s-ha-with-kubespay.html","title":"使用kubespray安装Kubernetes高可用集群","lang":"zh-CN","frontmatter":{"title":"使用kubespray安装Kubernetes高可用集群","description":"Kubernetes 节点规划 在线部署k8s集群 创建Python虚拟环境 安装与配置Kubespray 下载Kubespray源码 安装依赖 配置集群主机信息 提示 编辑inventory/mycluster/hosts.yaml，根据集群信息配置控制面板和工作节点 查看集群主机信息 国内镜像加速 设置etcd部署方式 提示 etcd_deploy...","head":[["meta",{"property":"og:url","content":"https://github.com/abelit/abelit-datapeacock.git/guide/cloudnative/kubernetes/installation/install-k8s-ha-with-kubespay.html"}],["meta",{"property":"og:site_name","content":"数之雀"}],["meta",{"property":"og:title","content":"使用kubespray安装Kubernetes高可用集群"}],["meta",{"property":"og:description","content":"Kubernetes 节点规划 在线部署k8s集群 创建Python虚拟环境 安装与配置Kubespray 下载Kubespray源码 安装依赖 配置集群主机信息 提示 编辑inventory/mycluster/hosts.yaml，根据集群信息配置控制面板和工作节点 查看集群主机信息 国内镜像加速 设置etcd部署方式 提示 etcd_deploy..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T14:06:18.000Z"}],["meta",{"property":"article:author","content":"Abelit"}],["meta",{"property":"article:modified_time","content":"2024-05-11T14:06:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用kubespray安装Kubernetes高可用集群\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-11T14:06:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Abelit\\",\\"url\\":\\"https://github.com/abelit\\"}]}"]]},"headers":[{"level":2,"title":"Kubernetes 节点规划","slug":"kubernetes-节点规划","link":"#kubernetes-节点规划","children":[]},{"level":2,"title":"在线部署k8s集群","slug":"在线部署k8s集群","link":"#在线部署k8s集群","children":[{"level":3,"title":"创建Python虚拟环境","slug":"创建python虚拟环境","link":"#创建python虚拟环境","children":[]},{"level":3,"title":"安装与配置Kubespray","slug":"安装与配置kubespray","link":"#安装与配置kubespray","children":[]},{"level":3,"title":"安装k8s集群","slug":"安装k8s集群","link":"#安装k8s集群","children":[]}]},{"level":2,"title":"离线部署k8s集群","slug":"离线部署k8s集群","link":"#离线部署k8s集群","children":[{"level":3,"title":"准备离线文件","slug":"准备离线文件","link":"#准备离线文件","children":[]},{"level":3,"title":"准备离线镜像","slug":"准备离线镜像","link":"#准备离线镜像","children":[]},{"level":3,"title":"安装k8s集群（普通方式）","slug":"安装k8s集群-普通方式","link":"#安装k8s集群-普通方式","children":[]},{"level":3,"title":"安装k8s集群（docker方式）","slug":"安装k8s集群-docker方式","link":"#安装k8s集群-docker方式","children":[]}]},{"level":2,"title":"管理集群信息","slug":"管理集群信息","link":"#管理集群信息","children":[{"level":3,"title":"新增节点","slug":"新增节点","link":"#新增节点","children":[]},{"level":3,"title":"删除节点","slug":"删除节点","link":"#删除节点","children":[]},{"level":3,"title":"升级","slug":"升级","link":"#升级","children":[]},{"level":3,"title":"卸载","slug":"卸载","link":"#卸载","children":[]}]}],"git":{"createdTime":1715436378000,"updatedTime":1715436378000,"contributors":[{"name":"ableit","email":"ychenid@live.com","commits":1}]},"readingTime":{"minutes":5.44,"words":1632},"filePathRelative":"guide/cloudnative/kubernetes/installation/install-k8s-ha-with-kubespay.md","localizedDate":"2024年5月11日","autoDesc":true,"excerpt":"<h2>Kubernetes 节点规划</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>主机名称</th>\\n<th>IP 地址</th>\\n<th>用途</th>\\n<th>组件</th>\\n<th>版本</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>k8s-master01</td>\\n<td>10.10.12.210,10.10.12.235(vip)</td>\\n<td>master 节点</td>\\n<td>kube-apiserver,kube-scheduler,etcd,kube-controller-manager,kubectl,kubelet,kubeadm,keepalive,haproxy</td>\\n<td>v1.28.2</td>\\n</tr>\\n<tr>\\n<td>k8s-master02</td>\\n<td>10.10.12.211,10.10.12.235(vip)</td>\\n<td>master 节点</td>\\n<td>kube-apiserver,kube-scheduler,etcd,kube-controller-manager,kubectl,kubelet,kubeadm,keepalive,haproxy</td>\\n<td>v1.28.2</td>\\n</tr>\\n<tr>\\n<td>k8s-master03</td>\\n<td>10.10.12.212,10.10.12.235(vip)</td>\\n<td>master 节点</td>\\n<td>kube-apiserver,kube-scheduler,etcd,kube-controller-manager,kubectl,kubelet,kubeadm,keepalive,haproxy</td>\\n<td>v1.28.2</td>\\n</tr>\\n<tr>\\n<td>k8s-worker01</td>\\n<td>10.10.12.213</td>\\n<td>worker 节点</td>\\n<td>kube-proxy,kubelet,kubeadm</td>\\n<td>v1.28.2</td>\\n</tr>\\n<tr>\\n<td>k8s-worker02</td>\\n<td>10.10.12.214</td>\\n<td>worker 节点</td>\\n<td>kube-proxy,kubelet,kubeadm</td>\\n<td>v1.28.2</td>\\n</tr>\\n</tbody>\\n</table>"}');export{y as comp,_ as data};
