import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as r,c as p,a,d as e,b as s,w as i,f as t}from"./app-DR5J2daJ.js";const d={},u=a("h1",{id:"如何用-sysbench-测试-tidb",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#如何用-sysbench-测试-tidb"},[a("span",null,"如何用 Sysbench 测试 TiDB")])],-1),b={href:"https://github.com/akopytov/sysbench/releases/tag/1.0.20",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="测试方案" tabindex="-1"><a class="header-anchor" href="#测试方案"><span>测试方案</span></a></h2><h3 id="tidb-配置" tabindex="-1"><a class="header-anchor" href="#tidb-配置"><span>TiDB 配置</span></a></h3><p>升高日志级别，可以减少打印日志数量，对 TiDB 的性能有积极影响。具体在 TiUP 配置文件中加入：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">server_configs</span><span class="token punctuation">:</span>
  <span class="token key atrule">tidb</span><span class="token punctuation">:</span>
    <span class="token key atrule">log.level</span><span class="token punctuation">:</span> <span class="token string">&quot;error&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),m=a("code",null,"tidb_enable_prepared_plan_cache",-1),v=a("code",null,"--db-ps-mode",-1),k=a("code",null,"auto",-1),g=t(`<blockquote><p><strong>注意：</strong></p><p>不同版本 Sysbench 的 <code>db-ps-mode</code> 参数默认值可能会不同，建议在命令中显式指定。</p></blockquote><h3 id="tikv-配置" tabindex="-1"><a class="header-anchor" href="#tikv-配置"><span>TiKV 配置</span></a></h3><p>升高 TiKV 的日志级别同样有利于提高性能表现。</p><p>TiKV 集群存在多个 Column Family，包括 Default CF、Write CF 和 LockCF，主要用于存储不同类型的数据。对于 Sysbench 测试，需要关注 Default CF 和 Write CF，导入数据的 Column Family 在 TiDB 集群中的比例是固定的。这个比例是：</p><p>Default CF : Write CF = 4 : 1</p><p>在 TiKV 中需要根据机器内存大小配置 RocksDB 的 block cache，以充分利用内存。以 40 GB 内存的虚拟机部署一个 TiKV 为例，其 block cache 建议配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">server_configs</span><span class="token punctuation">:</span>
  <span class="token key atrule">tikv</span><span class="token punctuation">:</span>
    <span class="token key atrule">log-level</span><span class="token punctuation">:</span> <span class="token string">&quot;error&quot;</span>
    <span class="token key atrule">rocksdb.defaultcf.block-cache-size</span><span class="token punctuation">:</span> <span class="token string">&quot;24GB&quot;</span>
    <span class="token key atrule">rocksdb.writecf.block-cache-size</span><span class="token punctuation">:</span> <span class="token string">&quot;6GB&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以使用共享 block cache 的方式进行设置：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">server_configs</span><span class="token punctuation">:</span>
  <span class="token key atrule">tikv</span><span class="token punctuation">:</span>
    <span class="token key atrule">storage.block-cache.capacity</span><span class="token punctuation">:</span> <span class="token string">&quot;30GB&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),y=t(`<h2 id="测试过程" tabindex="-1"><a class="header-anchor" href="#测试过程"><span>测试过程</span></a></h2><blockquote><p><strong>注意：</strong></p><p>此文档中的测试并没有使用如 HAproxy 等负载均衡工具。在 TiDB 单一节点上进行 Sysbench 测试，并把结果相加。负载均衡工具和不同版本参数也会影响性能表现。</p></blockquote><h3 id="sysbench-配置" tabindex="-1"><a class="header-anchor" href="#sysbench-配置"><span>Sysbench 配置</span></a></h3><p>以下为 Sysbench 配置文件样例：</p><div class="language-txt line-numbers-mode" data-ext="txt" data-title="txt"><pre class="language-txt"><code>mysql-host={TIDB_HOST}
mysql-port=4000
mysql-user=root
mysql-password=password
mysql-db=sbtest
time=600
threads={8, 16, 32, 64, 128, 256}
report-interval=10
db-driver=mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可根据实际需求调整其参数，其中 <code>TIDB_HOST</code> 为 TiDB server 的 IP 地址（配置文件中不能写多个地址），<code>threads</code> 为测试中的并发连接数，可在 “8, 16, 32, 64, 128, 256” 中调整，导入数据时，建议设置 threads = 8 或者 16。调整后，将该文件保存为名为 <strong>config</strong> 的文件。</p><p><strong>配置文件</strong>参考示例如下：</p><div class="language-txt line-numbers-mode" data-ext="txt" data-title="txt"><pre class="language-txt"><code>mysql-host=172.16.30.33
mysql-port=4000
mysql-user=root
mysql-password=password
mysql-db=sbtest
time=600
threads=16
report-interval=10
db-driver=mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据导入" tabindex="-1"><a class="header-anchor" href="#数据导入"><span>数据导入</span></a></h3><blockquote><p><strong>注意：</strong></p><p>如果 TiDB 启用了乐观事务模型（默认为悲观锁模式），当发现并发冲突时，会回滚事务。将 <code>tidb_disable_txn_auto_retry</code> 设置为 <code>off</code> 会开启事务冲突后的自动重试机制，可以尽可能避免事务冲突报错导致 Sysbench 程序退出的问题。</p></blockquote><p>在数据导入前，需要对 TiDB 进行简单设置。在 MySQL 客户端中执行如下命令：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token keyword">global</span> tidb_disable_txn_auto_retry <span class="token operator">=</span> <span class="token keyword">off</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后退出客户端。</p><p>重新启动 MySQL 客户端执行以下 SQL 语句，创建数据库 <code>sbtest</code>：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> sbtest<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调整 Sysbench 脚本创建索引的顺序。Sysbench 按照“建表-&gt;插入数据-&gt;创建索引”的顺序导入数据。对于 TiDB 而言，该方式会花费更多的导入时间。你可以通过调整顺序来加速数据的导入。</p>`,16),_={href:"https://github.com/akopytov/sysbench/tree/1.0.20",target:"_blank",rel:"noopener noreferrer"},f={href:"https://raw.githubusercontent.com/pingcap/tidb-bench/master/sysbench/sysbench-patch/oltp_common.lua",target:"_blank",rel:"noopener noreferrer"},T=a("code",null,"/usr/share/sysbench/oltp_common.lua",-1),x=a("code",null,"/usr/share/sysbench/oltp_common.lua",-1),B={href:"https://github.com/akopytov/sysbench/blob/1.0.20/src/lua/oltp_common.lua#L235-L240",target:"_blank",rel:"noopener noreferrer"},q=t(`<blockquote><p><strong>注意：</strong></p><p>此操作为可选操作，仅节约了数据导入时间。</p></blockquote><p>命令行输入以下命令，开始导入数据，config 文件为上一步中配置的文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sysbench --config-file<span class="token operator">=</span>config oltp_point_select <span class="token parameter variable">--tables</span><span class="token operator">=</span><span class="token number">32</span> --table-size<span class="token operator">=</span><span class="token number">10000000</span> prepare
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数据预热与统计信息收集" tabindex="-1"><a class="header-anchor" href="#数据预热与统计信息收集"><span>数据预热与统计信息收集</span></a></h3><p>数据预热可将磁盘中的数据载入内存的 block cache 中，预热后的数据对系统整体的性能有较大的改善，建议在每次重启集群后进行一次数据预热。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sysbench --config-file<span class="token operator">=</span>config oltp_point_select <span class="token parameter variable">--tables</span><span class="token operator">=</span><span class="token number">32</span> --table-size<span class="token operator">=</span><span class="token number">10000000</span> prewarm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="point-select-测试命令" tabindex="-1"><a class="header-anchor" href="#point-select-测试命令"><span>Point select 测试命令</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sysbench --config-file<span class="token operator">=</span>config oltp_point_select <span class="token parameter variable">--tables</span><span class="token operator">=</span><span class="token number">32</span> --table-size<span class="token operator">=</span><span class="token number">10000000</span> --db-ps-mode<span class="token operator">=</span>auto --rand-type<span class="token operator">=</span>uniform run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="update-index-测试命令" tabindex="-1"><a class="header-anchor" href="#update-index-测试命令"><span>Update index 测试命令</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sysbench --config-file<span class="token operator">=</span>config oltp_update_index <span class="token parameter variable">--tables</span><span class="token operator">=</span><span class="token number">32</span> --table-size<span class="token operator">=</span><span class="token number">10000000</span> --db-ps-mode<span class="token operator">=</span>auto --rand-type<span class="token operator">=</span>uniform run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="read-only-测试命令" tabindex="-1"><a class="header-anchor" href="#read-only-测试命令"><span>Read-only 测试命令</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sysbench --config-file<span class="token operator">=</span>config oltp_read_only <span class="token parameter variable">--tables</span><span class="token operator">=</span><span class="token number">32</span> --table-size<span class="token operator">=</span><span class="token number">10000000</span> --db-ps-mode<span class="token operator">=</span>auto --rand-type<span class="token operator">=</span>uniform run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h2><h3 id="在高并发压力下-tidb、tikv-的配置都合理-为什么整体性能还是偏低" tabindex="-1"><a class="header-anchor" href="#在高并发压力下-tidb、tikv-的配置都合理-为什么整体性能还是偏低"><span>在高并发压力下，TiDB、TiKV 的配置都合理，为什么整体性能还是偏低？</span></a></h3><p>这种情况可能与使用了 proxy 有关。可以尝试直接对单个 TiDB 加压，将求和后的结果与使用 proxy 的情况进行对比。</p><p>以 HAproxy 为例。<code>nbproc</code> 参数可以增加其最大启动的进程数，较新版本的 HAproxy 还支持 <code>nbthread</code> 和 <code>cpu-map</code> 等。这些都可以减少对其性能的不利影响。</p><h3 id="在高并发压力下-为什么-tikv-的-cpu-利用率依然很低" tabindex="-1"><a class="header-anchor" href="#在高并发压力下-为什么-tikv-的-cpu-利用率依然很低"><span>在高并发压力下，为什么 TiKV 的 CPU 利用率依然很低？</span></a></h3><p>TiKV 虽然整体 CPU 偏低，但部分模块的 CPU 可能已经达到了很高的利用率。</p><p>TiKV 的其他模块，如 storage readpool、coprocessor 和 gRPC 的最大并发度限制是可以通过 TiKV 的配置文件进行调整的。</p><p>通过 Grafana 的 TiKV Thread CPU 监控面板可以观察到其实际使用率。如出现多线程模块瓶颈，可以通过增加该模块并发度进行调整。</p><h3 id="在高并发压力下-tikv-也未达到-cpu-使用瓶颈-为什么-tidb-的-cpu-利用率依然很低" tabindex="-1"><a class="header-anchor" href="#在高并发压力下-tikv-也未达到-cpu-使用瓶颈-为什么-tidb-的-cpu-利用率依然很低"><span>在高并发压力下，TiKV 也未达到 CPU 使用瓶颈，为什么 TiDB 的 CPU 利用率依然很低？</span></a></h3><p>在某些高端设备上，使用的是 NUMA 架构的 CPU，跨 CPU 访问远端内存将极大降低性能。TiDB 默认将使用服务器所有 CPU，goroutine 的调度不可避免地会出现跨 CPU 内存访问。</p><p>因此，建议在 NUMA 架构服务器上，部署 <em>n</em> 个 TiDB（<em>n</em> = NUMA CPU 的个数），同时将 TiDB 的 <code>max-procs</code> 变量的值设置为与 NUMA CPU 的核数相同。</p>`,23);function D(S,C){const n=o("ExternalLinkIcon"),l=o("RouteLink");return r(),p("div",null,[u,a("p",null,[e("建议使用 Sysbench 1.0 或之后的更新版本，可在 "),a("a",b,[e("Sysbench Release 1.0.20 页面"),s(n)]),e("下载。")]),h,a("p",null,[e("同时，推荐启用 "),s(l,{to:"/system-variables.html#tidb_enable_prepared_plan_cache-%E4%BB%8E-v610-%E7%89%88%E6%9C%AC%E5%BC%80%E5%A7%8B%E5%BC%95%E5%85%A5"},{default:i(()=>[m]),_:1}),e("，并保证 "),v,e(" 设置为 "),k,e("，这样 Sysbench 就可以使用预处理语句。关于 SQL 执行计划缓存的功能及监控，请参考"),s(l,{to:"/sql-prepared-plan-cache.html"},{default:i(()=>[e("执行计划缓存")]),_:1}),e("。")]),g,a("p",null,[e("更详细的 TiKV 参数调优请参考 "),s(l,{to:"/tune-tikv-memory-performance.html"},{default:i(()=>[e("TiKV 内存参数性能调优")]),_:1}),e("。")]),y,a("p",null,[e("假设使用的 Sysbench 版本为 "),a("a",_,[e("1.0.20"),s(n)]),e("，可以通过以下两种方式来修改：")]),a("ol",null,[a("li",null,[e("直接下载为 TiDB 修改好的 "),a("a",f,[e("oltp_common.lua"),s(n)]),e(" 文件，覆盖 "),T,e(" 文件。")]),a("li",null,[e("将 "),x,e(" 的第 "),a("a",B,[e("235-240"),s(n)]),e(" 行移动到第 198 行以后。")])]),q])}const V=c(d,[["render",D],["__file","benchmark-tidb-using-sysbench.html.vue"]]),K=JSON.parse('{"path":"/guide/database/tidb/deployments/test/benchmark-tidb-using-sysbench.html","title":"如何用 Sysbench 测试 TiDB","lang":"zh-CN","frontmatter":{"title":"如何用 Sysbench 测试 TiDB","description":"如何用 Sysbench 测试 TiDB 建议使用 Sysbench 1.0 或之后的更新版本，可在 Sysbench Release 1.0.20 页面下载。 测试方案 TiDB 配置 升高日志级别，可以减少打印日志数量，对 TiDB 的性能有积极影响。具体在 TiUP 配置文件中加入： 同时，推荐启用 ，并保证 --db-ps-mode 设置为 a...","head":[["meta",{"property":"og:url","content":"https://github.com/abelit/abelit-datapeacock.git/guide/database/tidb/deployments/test/benchmark-tidb-using-sysbench.html"}],["meta",{"property":"og:site_name","content":"数之雀"}],["meta",{"property":"og:title","content":"如何用 Sysbench 测试 TiDB"}],["meta",{"property":"og:description","content":"如何用 Sysbench 测试 TiDB 建议使用 Sysbench 1.0 或之后的更新版本，可在 Sysbench Release 1.0.20 页面下载。 测试方案 TiDB 配置 升高日志级别，可以减少打印日志数量，对 TiDB 的性能有积极影响。具体在 TiUP 配置文件中加入： 同时，推荐启用 ，并保证 --db-ps-mode 设置为 a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T14:06:18.000Z"}],["meta",{"property":"article:author","content":"Abelit"}],["meta",{"property":"article:modified_time","content":"2024-05-11T14:06:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何用 Sysbench 测试 TiDB\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-11T14:06:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Abelit\\",\\"url\\":\\"https://github.com/abelit\\"}]}"]]},"headers":[{"level":2,"title":"测试方案","slug":"测试方案","link":"#测试方案","children":[{"level":3,"title":"TiDB 配置","slug":"tidb-配置","link":"#tidb-配置","children":[]},{"level":3,"title":"TiKV 配置","slug":"tikv-配置","link":"#tikv-配置","children":[]}]},{"level":2,"title":"测试过程","slug":"测试过程","link":"#测试过程","children":[{"level":3,"title":"Sysbench 配置","slug":"sysbench-配置","link":"#sysbench-配置","children":[]},{"level":3,"title":"数据导入","slug":"数据导入","link":"#数据导入","children":[]},{"level":3,"title":"数据预热与统计信息收集","slug":"数据预热与统计信息收集","link":"#数据预热与统计信息收集","children":[]},{"level":3,"title":"Point select 测试命令","slug":"point-select-测试命令","link":"#point-select-测试命令","children":[]},{"level":3,"title":"Update index 测试命令","slug":"update-index-测试命令","link":"#update-index-测试命令","children":[]},{"level":3,"title":"Read-only 测试命令","slug":"read-only-测试命令","link":"#read-only-测试命令","children":[]}]},{"level":2,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[{"level":3,"title":"在高并发压力下，TiDB、TiKV 的配置都合理，为什么整体性能还是偏低？","slug":"在高并发压力下-tidb、tikv-的配置都合理-为什么整体性能还是偏低","link":"#在高并发压力下-tidb、tikv-的配置都合理-为什么整体性能还是偏低","children":[]},{"level":3,"title":"在高并发压力下，为什么 TiKV 的 CPU 利用率依然很低？","slug":"在高并发压力下-为什么-tikv-的-cpu-利用率依然很低","link":"#在高并发压力下-为什么-tikv-的-cpu-利用率依然很低","children":[]},{"level":3,"title":"在高并发压力下，TiKV 也未达到 CPU 使用瓶颈，为什么 TiDB 的 CPU 利用率依然很低？","slug":"在高并发压力下-tikv-也未达到-cpu-使用瓶颈-为什么-tidb-的-cpu-利用率依然很低","link":"#在高并发压力下-tikv-也未达到-cpu-使用瓶颈-为什么-tidb-的-cpu-利用率依然很低","children":[]}]}],"git":{"createdTime":1715436378000,"updatedTime":1715436378000,"contributors":[{"name":"ableit","email":"ychenid@live.com","commits":1}]},"readingTime":{"minutes":5.07,"words":1520},"filePathRelative":"guide/database/tidb/deployments/test/benchmark-tidb-using-sysbench.md","localizedDate":"2024年5月11日","autoDesc":true,"excerpt":"\\n<p>建议使用 Sysbench 1.0 或之后的更新版本，可在 <a href=\\"https://github.com/akopytov/sysbench/releases/tag/1.0.20\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Sysbench Release 1.0.20 页面</a>下载。</p>\\n<h2>测试方案</h2>\\n<h3>TiDB 配置</h3>\\n<p>升高日志级别，可以减少打印日志数量，对 TiDB 的性能有积极影响。具体在 TiUP 配置文件中加入：</p>\\n<div class=\\"language-yaml\\" data-ext=\\"yml\\" data-title=\\"yml\\"><pre class=\\"language-yaml\\"><code><span class=\\"token key atrule\\">server_configs</span><span class=\\"token punctuation\\">:</span>\\n  <span class=\\"token key atrule\\">tidb</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token key atrule\\">log.level</span><span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"error\\"</span>\\n</code></pre></div>"}');export{V as comp,K as data};
