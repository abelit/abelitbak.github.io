import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as d,c as u,a as n,d as e,b as s,w as l,f as t}from"./app-DR5J2daJ.js";const v="/assets/architecture-ha-k8s-cluster-BIOk1zm-.png",b={},k=t('<p>高可用 Kubernetes 集群能够确保应用程序在运行时不会出现服务中断，这也是生产的需求之一。为此，有很多方法可供选择以实现高可用。</p><p>本教程演示了如何配置 Keepalived 和 HAproxy 使负载均衡、实现高可用。步骤如下：</p><ol><li>准备主机。</li><li>配置 Keepalived 和 HAproxy。</li><li>使用 KubeKey 创建 Kubernetes 集群，并安装 KubeSphere。</li></ol><h2 id="集群架构" tabindex="-1"><a class="header-anchor" href="#集群架构"><span>集群架构</span></a></h2><p>示例集群有三个主节点，三个工作节点，两个用于负载均衡的节点，以及一个虚拟 IP 地址。本示例中的虚拟 IP 地址也可称为“浮动 IP 地址”。这意味着在节点故障的情况下，该 IP 地址可在节点之间漂移，从而实现高可用。</p><figure><img src="'+v+'" alt="architecture-ha-k8s-cluster" tabindex="0" loading="lazy"><figcaption>architecture-ha-k8s-cluster</figcaption></figure><p>请注意，在本示例中，Keepalived 和 HAproxy 没有安装在任何主节点上。但您也可以这样做，并同时实现高可用。然而，配置两个用于负载均衡的特定节点（您可以按需增加更多此类节点）会更加安全。这两个节点上只安装 Keepalived 和 HAproxy，以避免与任何 Kubernetes 组件和服务的潜在冲突。</p><h2 id="准备主机" tabindex="-1"><a class="header-anchor" href="#准备主机"><span>准备主机</span></a></h2><table><thead><tr><th>IP 地址</th><th>主机名</th><th>角色</th></tr></thead><tbody><tr><td>172.16.0.2</td><td>lb1</td><td>Keepalived &amp; HAproxy</td></tr><tr><td>172.16.0.3</td><td>lb2</td><td>Keepalived &amp; HAproxy</td></tr><tr><td>172.16.0.4</td><td>master1</td><td>master, etcd</td></tr><tr><td>172.16.0.5</td><td>master2</td><td>master, etcd</td></tr><tr><td>172.16.0.6</td><td>master3</td><td>master, etcd</td></tr><tr><td>172.16.0.7</td><td>worker1</td><td>worker</td></tr><tr><td>172.16.0.8</td><td>worker2</td><td>worker</td></tr><tr><td>172.16.0.9</td><td>worker3</td><td>worker</td></tr><tr><td>172.16.0.10</td><td></td><td>虚拟 IP 地址</td></tr></tbody></table>',9),m={href:"https://kubesphere.io/zh/docs/v3.3/installing-on-linux/introduction/multioverview/#step-1-prepare-linux-hosts",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"配置负载均衡",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#配置负载均衡"},[n("span",null,"配置负载均衡")])],-1),f={href:"https://www.keepalived.org/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://www.haproxy.org/",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>由于 <code>lb1</code> 和 <code>lb2</code> 上安装了 Keepalived 和 HAproxy，如果其中一个节点故障，虚拟 IP 地址（即浮动 IP 地址）将自动与另一个节点关联，使集群仍然可以正常运行，从而实现高可用。若有需要，也可以此为目的，添加更多安装 Keepalived 和 HAproxy 的节点。</p><p>先运行以下命令安装 Keepalived 和 HAproxy。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> keepalived haproxy psmisc <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="haproxy" tabindex="-1"><a class="header-anchor" href="#haproxy"><span>HAproxy</span></a></h3><ol><li><p>在两台用于负载均衡的机器上运行以下命令以配置 Proxy（两台机器的 Proxy 配置相同）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vi</span> /etc/haproxy/haproxy.cfg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>以下是示例配置，供您参考（请注意 <code>server</code> 字段。请记住 <code>6443</code> 是 <code>apiserver</code> 端口）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>global
    log /dev/log  local0 warning
    <span class="token function">chroot</span>      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     <span class="token number">4000</span>
    user        haproxy
    group       haproxy
    daemon

   stats socket /var/lib/haproxy/stats

defaults
  log global
  option  httplog
  option  dontlognull
        <span class="token function">timeout</span> connect <span class="token number">5000</span>
        <span class="token function">timeout</span> client <span class="token number">50000</span>
        <span class="token function">timeout</span> server <span class="token number">50000</span>

frontend kube-apiserver
  <span class="token builtin class-name">bind</span> *:6443
  mode tcp
  option tcplog
  default_backend kube-apiserver

backend kube-apiserver
    mode tcp
    option tcplog
    option tcp-check
    balance roundrobin
    default-server inter 10s downinter 5s rise <span class="token number">2</span> fall <span class="token number">2</span> slowstart 60s maxconn <span class="token number">250</span> maxqueue <span class="token number">256</span> weight <span class="token number">100</span>
    server kube-apiserver-1 <span class="token number">172.16</span>.0.4:6443 check <span class="token comment"># Replace the IP address with your own.</span>
    server kube-apiserver-2 <span class="token number">172.16</span>.0.5:6443 check <span class="token comment"># Replace the IP address with your own.</span>
    server kube-apiserver-3 <span class="token number">172.16</span>.0.6:6443 check <span class="token comment"># Replace the IP address with your own.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>保存文件并运行以下命令以重启 HAproxy。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl restart haproxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使 HAproxy 在开机后自动运行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> haproxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>确保您在另一台机器 (<code>lb2</code>) 上也配置了 HAproxy。</p></li></ol><h3 id="keepalived" tabindex="-1"><a class="header-anchor" href="#keepalived"><span>Keepalived</span></a></h3><p>两台机器上必须都安装 Keepalived，但在配置上略有不同。</p><ol><li><p>运行以下命令以配置 Keepalived。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vi</span> /etc/keepalived/keepalived.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>以下是示例配置 (<code>lb1</code>)，供您参考：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>global_defs <span class="token punctuation">{</span>
  notification_email <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
  router_id LVS_DEVEL
  vrrp_skip_check_adv_addr
  vrrp_garp_interval <span class="token number">0</span>
  vrrp_gna_interval <span class="token number">0</span>
<span class="token punctuation">}</span>

vrrp_script chk_haproxy <span class="token punctuation">{</span>
  script <span class="token string">&quot;killall -0 haproxy&quot;</span>
  interval <span class="token number">2</span>
  weight <span class="token number">2</span>
<span class="token punctuation">}</span>

vrrp_instance haproxy-vip <span class="token punctuation">{</span>
  state BACKUP
  priority <span class="token number">100</span>
  interface eth0                       <span class="token comment"># Network card</span>
  virtual_router_id <span class="token number">60</span>
  advert_int <span class="token number">1</span>
  authentication <span class="token punctuation">{</span>
    auth_type PASS
    auth_pass <span class="token number">1111</span>
  <span class="token punctuation">}</span>
  unicast_src_ip <span class="token number">172.16</span>.0.2      <span class="token comment"># The IP address of this machine</span>
  unicast_peer <span class="token punctuation">{</span>
    <span class="token number">172.16</span>.0.3                         <span class="token comment"># The IP address of peer machines</span>
  <span class="token punctuation">}</span>

  virtual_ipaddress <span class="token punctuation">{</span>
    <span class="token number">172.16</span>.0.10/24                  <span class="token comment"># The VIP address</span>
  <span class="token punctuation">}</span>

  track_script <span class="token punctuation">{</span>
    chk_haproxy
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><p>对于 <code>interface</code> 字段，您必须提供自己的网卡信息。您可以在机器上运行 <code>ifconfig</code> 以获取该值。</p></li><li><p>为 <code>unicast_src_ip</code> 提供的 IP 地址是您当前机器的 IP 地址。对于也安装了 HAproxy 和 Keepalived 进行负载均衡的其他机器，必须在字段 <code>unicast_peer</code> 中输入其 IP 地址。</p></li></ul></div></li><li><p>保存文件并运行以下命令以重启 Keepalived。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl restart keepalived
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使 Keepalived 在开机后自动运行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> keepalived
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>确保您在另一台机器 (<code>lb2</code>) 上也配置了 Keepalived。</p></li></ol><h2 id="验证高可用" tabindex="-1"><a class="header-anchor" href="#验证高可用"><span>验证高可用</span></a></h2><p>在开始创建 Kubernetes 集群之前，请确保已经测试了高可用。</p><ol><li><p>在机器 <code>lb1</code> 上，运行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@lb1 ~<span class="token punctuation">]</span><span class="token comment"># ip a s</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope <span class="token function">host</span>
       valid_lft forever preferred_lft forever
<span class="token number">2</span>: eth0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc mq state UP group default qlen <span class="token number">1000</span>
    link/ether <span class="token number">52</span>:54:9e:27:38:c8 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.16</span>.0.2/24 brd <span class="token number">172.16</span>.0.255 scope global noprefixroute dynamic eth0
       valid_lft 73334sec preferred_lft 73334sec
    inet <span class="token number">172.16</span>.0.10/24 scope global secondary eth0 <span class="token comment"># The VIP address</span>
       valid_lft forever preferred_lft forever
    inet6 fe80::510e:f96:98b2:af40/64 scope <span class="token function">link</span> noprefixroute
       valid_lft forever preferred_lft forever
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如上图所示，虚拟 IP 地址已经成功添加。模拟此节点上的故障：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl stop haproxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>再次检查浮动 IP 地址，您可以看到该地址在 <code>lb1</code> 上消失了。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@lb1 ~<span class="token punctuation">]</span><span class="token comment"># ip a s</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope <span class="token function">host</span>
       valid_lft forever preferred_lft forever
<span class="token number">2</span>: eth0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc mq state UP group default qlen <span class="token number">1000</span>
    link/ether <span class="token number">52</span>:54:9e:27:38:c8 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.16</span>.0.2/24 brd <span class="token number">172.16</span>.0.255 scope global noprefixroute dynamic eth0
       valid_lft 72802sec preferred_lft 72802sec
    inet6 fe80::510e:f96:98b2:af40/64 scope <span class="token function">link</span> noprefixroute
       valid_lft forever preferred_lft forever
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>理论上讲，若配置成功，该虚拟 IP 会漂移到另一台机器 (<code>lb2</code>) 上。在 <code>lb2</code> 上运行以下命令，这是预期的输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@lb2 ~<span class="token punctuation">]</span><span class="token comment"># ip a s</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope <span class="token function">host</span>
       valid_lft forever preferred_lft forever
<span class="token number">2</span>: eth0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc mq state UP group default qlen <span class="token number">1000</span>
    link/ether <span class="token number">52</span>:54:9e:3f:51:ba brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.16</span>.0.3/24 brd <span class="token number">172.16</span>.0.255 scope global noprefixroute dynamic eth0
       valid_lft 72690sec preferred_lft 72690sec
    inet <span class="token number">172.16</span>.0.10/24 scope global secondary eth0   <span class="token comment"># The VIP address</span>
       valid_lft forever preferred_lft forever
    inet6 fe80::f67c:bd4f:d6d5:1d9b/64 scope <span class="token function">link</span> noprefixroute
       valid_lft forever preferred_lft forever
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如上所示，高可用已经配置成功。</p></li></ol><h2 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖"><span>安装依赖</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> conntrack socat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用-kubekey-创建-kubernetes-集群" tabindex="-1"><a class="header-anchor" href="#使用-kubekey-创建-kubernetes-集群"><span>使用 KubeKey 创建 Kubernetes 集群</span></a></h2>`,14),_={href:"https://github.com/kubesphere/kubekey",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/kubesphere/kubekey/releases",target:"_blank",rel:"noopener noreferrer"},K=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"curl"),e(),n("span",{class:"token parameter variable"},"-sfL"),e(" https://get-kk.kubesphere.io "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token assign-left variable"},"VERSION"),n("span",{class:"token operator"},"="),e("v3.0.10 "),n("span",{class:"token function"},"sh"),e(` -
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),P=n("p",null,null,-1),A=n("p",null,"首先运行以下命令，以确保您从正确的区域下载 KubeKey。",-1),w=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token builtin class-name"},"export"),e(),n("span",{class:"token assign-left variable"},"KKZONE"),n("span",{class:"token operator"},"="),e(`cn
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),I=n("p",null,"运行以下命令来下载 KubeKey：",-1),H=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"curl"),e(),n("span",{class:"token parameter variable"},"-sfL"),e(" https://get-kk.kubesphere.io "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token assign-left variable"},"VERSION"),n("span",{class:"token operator"},"="),e("v3.0.10 "),n("span",{class:"token function"},"sh"),e(` -
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),T=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"提示"),n("p",null,[e("下载 KubeKey 之后，如果您将其转移到访问 Googleapis 受限的新机器上，请务必再次运行 "),n("code",null,"export KKZONE=cn"),e("，然后继续执行以下步骤。")])],-1),O=t(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>通过以上命令，可以下载 KubeKey 的最新版本。您可以更改命令中的版本号来下载特定的版本。</p></div><p>使 <code>kk</code> 成为可执行文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x kk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用默认配置创建一个示例配置文件。此处以 Kubernetes v1.26.2 作为示例。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./kk create config --with-kubesphere v3.4.0 --with-kubernetes v1.26.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),U={class:"hint-container tip"},q=n("p",{class:"hint-container-title"},"提示",-1),S={href:"https://kubesphere.io/zh/docs/v3.3/installing-on-linux/introduction/kubekey/#%E6%94%AF%E6%8C%81%E7%9F%A9%E9%98%B5",target:"_blank",rel:"noopener noreferrer"},E=n("li",null,[n("p",null,[e("如果您没有在本步骤的命令中添加标志 "),n("code",null,"--with-kubesphere"),e("，那么除非您使用配置文件中的 "),n("code",null,"addons"),e(" 字段进行安装，或者稍后使用 "),n("code",null,"./kk create cluster"),e(" 时再添加该标志，否则 KubeSphere 将不会被部署。")])],-1),N=n("li",null,[n("p",null,[e("如果您添加标志 "),n("code",null,"--with-kubesphere"),e(" 时未指定 KubeSphere 版本，则会安装最新版本的 KubeSphere。")])],-1),L=t(`<h2 id="部署-kubesphere-和-kubernetes" tabindex="-1"><a class="header-anchor" href="#部署-kubesphere-和-kubernetes"><span>部署 KubeSphere 和 Kubernetes</span></a></h2><p>运行上述命令后，将创建配置文件 <code>config-sample.yaml</code>。编辑文件以添加机器信息、配置负载均衡器等。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果自定义文件名，那么文件名可能会有所不同。</p></div><h3 id="config-sample-yaml-示例" tabindex="-1"><a class="header-anchor" href="#config-sample-yaml-示例"><span>config-sample.yaml 示例</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token punctuation">...</span>
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> master1<span class="token punctuation">,</span> <span class="token key atrule">address</span><span class="token punctuation">:</span> 172.16.0.4<span class="token punctuation">,</span> <span class="token key atrule">internalAddress</span><span class="token punctuation">:</span> 172.16.0.4<span class="token punctuation">,</span> <span class="token key atrule">user</span><span class="token punctuation">:</span> root<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> Testing123<span class="token punctuation">}</span>
  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> master2<span class="token punctuation">,</span> <span class="token key atrule">address</span><span class="token punctuation">:</span> 172.16.0.5<span class="token punctuation">,</span> <span class="token key atrule">internalAddress</span><span class="token punctuation">:</span> 172.16.0.5<span class="token punctuation">,</span> <span class="token key atrule">user</span><span class="token punctuation">:</span> root<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> Testing123<span class="token punctuation">}</span>
  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> master3<span class="token punctuation">,</span> <span class="token key atrule">address</span><span class="token punctuation">:</span> 172.16.0.6<span class="token punctuation">,</span> <span class="token key atrule">internalAddress</span><span class="token punctuation">:</span> 172.16.0.6<span class="token punctuation">,</span> <span class="token key atrule">user</span><span class="token punctuation">:</span> root<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> Testing123<span class="token punctuation">}</span>
  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> worker1<span class="token punctuation">,</span> <span class="token key atrule">address</span><span class="token punctuation">:</span> 172.16.0.7<span class="token punctuation">,</span> <span class="token key atrule">internalAddress</span><span class="token punctuation">:</span> 172.16.0.7<span class="token punctuation">,</span> <span class="token key atrule">user</span><span class="token punctuation">:</span> root<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> Testing123<span class="token punctuation">}</span>
  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> worker2<span class="token punctuation">,</span> <span class="token key atrule">address</span><span class="token punctuation">:</span> 172.16.0.8<span class="token punctuation">,</span> <span class="token key atrule">internalAddress</span><span class="token punctuation">:</span> 172.16.0.8<span class="token punctuation">,</span> <span class="token key atrule">user</span><span class="token punctuation">:</span> root<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> Testing123<span class="token punctuation">}</span>
  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> worker3<span class="token punctuation">,</span> <span class="token key atrule">address</span><span class="token punctuation">:</span> 172.16.0.9<span class="token punctuation">,</span> <span class="token key atrule">internalAddress</span><span class="token punctuation">:</span> 172.16.0.9<span class="token punctuation">,</span> <span class="token key atrule">user</span><span class="token punctuation">:</span> root<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> Testing123<span class="token punctuation">}</span>
  <span class="token key atrule">roleGroups</span><span class="token punctuation">:</span>
    <span class="token key atrule">etcd</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> master1
    <span class="token punctuation">-</span> master2
    <span class="token punctuation">-</span> master3
    <span class="token key atrule">control-plane</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> master1
    <span class="token punctuation">-</span> master2
    <span class="token punctuation">-</span> master3
    <span class="token key atrule">worker</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> worker1
    <span class="token punctuation">-</span> worker2
    <span class="token punctuation">-</span> worker3
  <span class="token key atrule">controlPlaneEndpoint</span><span class="token punctuation">:</span>
    <span class="token key atrule">domain</span><span class="token punctuation">:</span> lb.kubesphere.local
    <span class="token key atrule">address</span><span class="token punctuation">:</span> 172.16.0.10   <span class="token comment"># The VIP address</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6443</span>
<span class="token punctuation">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),C={class:"hint-container tip"},R=n("p",{class:"hint-container-title"},"提示",-1),V=n("li",null,[e("请使用您自己的 VIP 地址来替换 "),n("code",null,"controlPlaneEndpoint.address"),e(" 的值。")],-1),B={href:"https://kubesphere.io/zh/docs/v3.3/installing-on-linux/introduction/multioverview/#2-edit-the-configuration-file",target:"_blank",rel:"noopener noreferrer"},G=t(`<h3 id="开始安装" tabindex="-1"><a class="header-anchor" href="#开始安装"><span>开始安装</span></a></h3><p>完成配置之后，可以执行以下命令开始安装：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./kk create cluster <span class="token parameter variable">-f</span> config-sample.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证安装" tabindex="-1"><a class="header-anchor" href="#验证安装"><span>验证安装</span></a></h3><ol><li><p>运行以下命令以检查安装日志。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kubectl logs <span class="token parameter variable">-n</span> kubesphere-system <span class="token variable"><span class="token variable">$(</span>kubectl get pod <span class="token parameter variable">-n</span> kubesphere-system <span class="token parameter variable">-l</span> <span class="token string">&#39;app in (ks-install, ks-installer)&#39;</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{.items[0].metadata.name}&#39;</span><span class="token variable">)</span></span> <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>看到以下信息时，表明高可用集群已成功创建。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#####################################################</span>
<span class="token comment">###              Welcome to KubeSphere!           ###</span>
<span class="token comment">#####################################################</span>

Console: http://172.16.0.4:30880
Account: admin
Password: P@88w0rd

NOTES：
  <span class="token number">1</span>. After you log into the console, please check the
     monitoring status of <span class="token function">service</span> components <span class="token keyword">in</span>
     the <span class="token string">&quot;Cluster Management&quot;</span><span class="token builtin class-name">.</span> If any <span class="token function">service</span> is not
     ready, please <span class="token function">wait</span> patiently <span class="token keyword">until</span> all components
     are up and running.
  <span class="token number">2</span>. Please change the default password after login.

<span class="token comment">#####################################################</span>
https://kubesphere.io             <span class="token number">2020</span>-xx-xx xx:xx:xx
<span class="token comment">#####################################################</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,5);function W(z,D){const a=r("ExternalLinkIcon"),o=r("Tabs");return d(),u("div",null,[k,n("p",null,[e("有关更多节点、网络、依赖项等要求的信息，请参见"),n("a",m,[e("多节点安装"),s(a)]),e("。")]),h,n("p",null,[n("a",f,[e("Keepalived"),s(a)]),e(" 提供 VRRP 实现，并允许您配置 Linux 机器使负载均衡，预防单点故障。"),n("a",g,[e("HAProxy"),s(a)]),e(" 提供可靠、高性能的负载均衡，能与 Keepalived 完美配合。")]),y,n("p",null,[n("a",_,[e("KubeKey"),s(a)]),e(" 是一款用来创建 Kubernetes 集群的工具，高效而便捷。请按照以下步骤下载 KubeKey。")]),s(o,{id:"302",data:[{id:"如果您能正常访问 GitHub/Googleapis"},{id:"如果您访问 GitHub/Googleapis 受限"}],active:0},{title0:l(({value:i,isActive:p})=>[e("如果您能正常访问 GitHub/Googleapis")]),title1:l(({value:i,isActive:p})=>[e("如果您访问 GitHub/Googleapis 受限")]),tab0:l(({value:i,isActive:p})=>[n("p",null,[e("从 "),n("a",x,[e("GitHub Release Page"),s(a)]),e(" 下载 KubeKey 或者直接使用以下命令。")]),K,P]),tab1:l(({value:i,isActive:p})=>[A,w,I,H,T]),_:1}),O,n("div",U,[q,n("ul",null,[n("li",null,[n("p",null,[e("安装 KubeSphere 3.4 的建议 Kubernetes 版本：v1.20.x、v1.21.x、v1.22.x、v1.23.x、* v1.24.x、* v1.25.x 和 * v1.26.x。带星号的版本可能出现边缘节点部分功能不可用的情况。因此，如需使用边缘节点，推荐安装 v1.23.x。如果不指定 Kubernetes 版本，KubeKey 将默认安装 Kubernetes v1.23.10。有关受支持的 Kubernetes 版本的更多信息，请参见"),n("a",S,[e("支持矩阵"),s(a)]),e("。")])]),E,N])]),L,n("div",C,[R,n("ul",null,[V,n("li",null,[e("有关更多本配置文件中不同参数的信息，请参见"),n("a",B,[e("多节点安装"),s(a)]),e("。")])])]),G])}const j=c(b,[["render",W],["__file","set-up-ha-cluster-using-keepalived-haproxy.html.vue"]]),F=JSON.parse('{"path":"/guide/cloudnative/kubesphere/install-on-linux/high-availability-configurations/set-up-ha-cluster-using-keepalived-haproxy.html","title":"使用 Keepalived 和 HAproxy 创建高可用 Kubernetes 集群","lang":"zh-CN","frontmatter":{"title":"使用 Keepalived 和 HAproxy 创建高可用 Kubernetes 集群","description":"高可用 Kubernetes 集群能够确保应用程序在运行时不会出现服务中断，这也是生产的需求之一。为此，有很多方法可供选择以实现高可用。 本教程演示了如何配置 Keepalived 和 HAproxy 使负载均衡、实现高可用。步骤如下： 准备主机。 配置 Keepalived 和 HAproxy。 使用 KubeKey 创建 Kubernetes 集群...","head":[["meta",{"property":"og:url","content":"https://github.com/abelit/abelit-datapeacock.git/guide/cloudnative/kubesphere/install-on-linux/high-availability-configurations/set-up-ha-cluster-using-keepalived-haproxy.html"}],["meta",{"property":"og:site_name","content":"数之雀"}],["meta",{"property":"og:title","content":"使用 Keepalived 和 HAproxy 创建高可用 Kubernetes 集群"}],["meta",{"property":"og:description","content":"高可用 Kubernetes 集群能够确保应用程序在运行时不会出现服务中断，这也是生产的需求之一。为此，有很多方法可供选择以实现高可用。 本教程演示了如何配置 Keepalived 和 HAproxy 使负载均衡、实现高可用。步骤如下： 准备主机。 配置 Keepalived 和 HAproxy。 使用 KubeKey 创建 Kubernetes 集群..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T14:06:18.000Z"}],["meta",{"property":"article:author","content":"Abelit"}],["meta",{"property":"article:modified_time","content":"2024-05-11T14:06:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 Keepalived 和 HAproxy 创建高可用 Kubernetes 集群\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-11T14:06:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Abelit\\",\\"url\\":\\"https://github.com/abelit\\"}]}"]]},"headers":[{"level":2,"title":"集群架构","slug":"集群架构","link":"#集群架构","children":[]},{"level":2,"title":"准备主机","slug":"准备主机","link":"#准备主机","children":[]},{"level":2,"title":"配置负载均衡","slug":"配置负载均衡","link":"#配置负载均衡","children":[{"level":3,"title":"HAproxy","slug":"haproxy","link":"#haproxy","children":[]},{"level":3,"title":"Keepalived","slug":"keepalived","link":"#keepalived","children":[]}]},{"level":2,"title":"验证高可用","slug":"验证高可用","link":"#验证高可用","children":[]},{"level":2,"title":"安装依赖","slug":"安装依赖","link":"#安装依赖","children":[]},{"level":2,"title":"使用 KubeKey 创建 Kubernetes 集群","slug":"使用-kubekey-创建-kubernetes-集群","link":"#使用-kubekey-创建-kubernetes-集群","children":[]},{"level":2,"title":"部署 KubeSphere 和 Kubernetes","slug":"部署-kubesphere-和-kubernetes","link":"#部署-kubesphere-和-kubernetes","children":[{"level":3,"title":"config-sample.yaml 示例","slug":"config-sample-yaml-示例","link":"#config-sample-yaml-示例","children":[]},{"level":3,"title":"开始安装","slug":"开始安装","link":"#开始安装","children":[]},{"level":3,"title":"验证安装","slug":"验证安装","link":"#验证安装","children":[]}]}],"git":{"createdTime":1715436378000,"updatedTime":1715436378000,"contributors":[{"name":"ableit","email":"ychenid@live.com","commits":1}]},"readingTime":{"minutes":7.88,"words":2365},"filePathRelative":"guide/cloudnative/kubesphere/install-on-linux/high-availability-configurations/set-up-ha-cluster-using-keepalived-haproxy.md","localizedDate":"2024年5月11日","autoDesc":true,"excerpt":"<p>高可用 Kubernetes 集群能够确保应用程序在运行时不会出现服务中断，这也是生产的需求之一。为此，有很多方法可供选择以实现高可用。</p>\\n<p>本教程演示了如何配置 Keepalived 和 HAproxy 使负载均衡、实现高可用。步骤如下：</p>\\n<ol>\\n<li>准备主机。</li>\\n<li>配置 Keepalived 和 HAproxy。</li>\\n<li>使用 KubeKey 创建 Kubernetes 集群，并安装 KubeSphere。</li>\\n</ol>\\n<h2>集群架构</h2>\\n<p>示例集群有三个主节点，三个工作节点，两个用于负载均衡的节点，以及一个虚拟 IP 地址。本示例中的虚拟 IP 地址也可称为“浮动 IP 地址”。这意味着在节点故障的情况下，该 IP 地址可在节点之间漂移，从而实现高可用。</p>"}');export{j as comp,F as data};
